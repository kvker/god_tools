(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ "../../../../Users/Administrator/Project/the100questions/assets/rubbish.json":
/*!**************************************************************************!*\
  !*** C:/Users/Administrator/Project/the100questions/assets/rubbish.json ***!
  \**************************************************************************/
/*! exports provideddefault */
/***/ (function(module) {

module.exports = [{"name":"阿司匹林","categroy":2},{"name":"阿尔卑斯糖","categroy":4},{"name":"艾草","categroy":4},{"name":"艾叶","categroy":4},{"name":"安全帽","categroy":1},{"name":"安全套","categroy":8},{"name":"按摩棒","categroy":8},{"name":"密胺碗","categroy":1},{"name":"密胺餐具","categroy":1},{"name":"档案袋","categroy":1},{"name":"肮脏塑料袋","categroy":8},{"name":"棉袄","categroy":1},{"name":"芭蕉叶","categroy":4},{"name":"八角","categroy":4},{"name":"八宝饭","categroy":4},{"name":"八宝粥","categroy":4},{"name":"锅巴","categroy":4},{"name":"泥巴","categroy":8},{"name":"巴旦木壳","categroy":4},{"name":"扫把","categroy":8},{"name":"拖把","categroy":8},{"name":"旧拖把","categroy":8},{"name":"浴霸灯","categroy":1},{"name":"浴霸灯泡","categroy":2},{"name":"白菜","categroy":4},{"name":"白纸","categroy":1},{"name":"百洁布","categroy":8},{"name":"玻璃摆件","categroy":1},{"name":"一般铁罐","categroy":1},{"name":"板栗","categroy":4},{"name":"复印件版纸","categroy":1},{"name":"干拌面","categroy":4},{"name":"搅拌棒","categroy":8},{"name":"搅拌勺","categroy":8},{"name":"花瓣","categroy":4},{"name":"衣服半成品","categroy":1},{"name":"手办","categroy":1},{"name":"蹄膀","categroy":4},{"name":"鸡翅膀","categroy":4},{"name":"蹄膀骨头","categroy":8},{"name":"棒骨","categroy":8},{"name":"胶棒","categroy":8},{"name":"棉棒","categroy":8},{"name":"蚌壳","categroy":8},{"name":"包包","categroy":1},{"name":"包子","categroy":4},{"name":"布包","categroy":1},{"name":"包装薄膜","categroy":8},{"name":"塑料薄膜","categroy":8},{"name":"薄型塑料袋","categroy":8},{"name":"保健品","categroy":2},{"name":"保龄球","categroy":8},{"name":"保暖杯","categroy":1},{"name":"汉堡","categroy":4},{"name":"汉堡包","categroy":4},{"name":"汉堡盒","categroy":8},{"name":"宝特瓶","categroy":1},{"name":"抱枕","categroy":1},{"name":"报刊","categroy":1},{"name":"报纸","categroy":1},{"name":"海报","categroy":1},{"name":"鲍鱼","categroy":4},{"name":"鲍鱼壳","categroy":8},{"name":"爆竹","categroy":8},{"name":"爆米花","categroy":4},{"name":"铁杯","categroy":1},{"name":"纸杯","categroy":8},{"name":"旧背包","categroy":1},{"name":"贝壳","categroy":8},{"name":"扇贝","categroy":4},{"name":"贝壳类","categroy":8},{"name":"电脑设备","categroy":1},{"name":"被单","categroy":1},{"name":"被套","categroy":1},{"name":"被芯","categroy":1},{"name":"本子","categroy":1},{"name":"绘本","categroy":1},{"name":"课本","categroy":1},{"name":"绷带","categroy":8},{"name":"鼻毛","categroy":8},{"name":"鼻屎","categroy":8},{"name":"鼻涕纸","categroy":8},{"name":"笔","categroy":8},{"name":"笔袋","categroy":8},{"name":"雪碧瓶","categroy":1},{"name":"碧根果壳","categroy":8},{"name":"冥币","categroy":8},{"name":"游戏币","categroy":1},{"name":"避孕套","categroy":8},{"name":"避孕药","categroy":2},{"name":"用过的避孕套","categroy":8},{"name":"鞭炮","categroy":8},{"name":"牛鞭","categroy":4},{"name":"纸张鞭炮","categroy":8},{"name":"编织袋","categroy":8},{"name":"便签","categroy":8},{"name":"变质食品","categroy":4},{"name":"变质的食物","categroy":4},{"name":"标签","categroy":8},{"name":"鼠标","categroy":1},{"name":"标签卡","categroy":8},{"name":"手表","categroy":1},{"name":"钟表","categroy":1},{"name":"电表盒","categroy":1},{"name":"别针","categroy":8},{"name":"曲别针","categroy":8},{"name":"瘪掉的篮球","categroy":1},{"name":"冰袋","categroy":8},{"name":"冰柜","categroy":1},{"name":"冰糖","categroy":4},{"name":"葡萄柄","categroy":4},{"name":"游戏手柄","categroy":1},{"name":"丙烯","categroy":8},{"name":"饼干","categroy":4},{"name":"大饼","categroy":4},{"name":"粉饼","categroy":8},{"name":"病人换下来的纸尿裤","categroy":8},{"name":"玻璃","categroy":1},{"name":"玻璃杯","categroy":1},{"name":"玻璃尺","categroy":1},{"name":"菠菜","categroy":4},{"name":"菠萝","categroy":4},{"name":"菠萝干","categroy":4},{"name":"数字音乐播放器","categroy":1},{"name":"微波炉","categroy":1},{"name":"铂金纸","categroy":8},{"name":"铝箔","categroy":1},{"name":"鋁箔","categroy":1},{"name":"锡箔","categroy":8},{"name":"鸭脖","categroy":4},{"name":"鸭脖子","categroy":4},{"name":"捕蚊灯","categroy":1},{"name":"萝卜","categroy":4},{"name":"胡萝卜","categroy":4},{"name":"萝卜干","categroy":4},{"name":"不锈钢","categroy":1},{"name":"不粘锅","categroy":1},{"name":"尿不湿","categroy":8},{"name":"布","categroy":1},{"name":"布袋","categroy":1},{"name":"电话簿","categroy":1},{"name":"板擦儿","categroy":8},{"name":"擦屎纸","categroy":8},{"name":"擦手巾","categroy":8},{"name":"药材","categroy":4},{"name":"彩笔","categroy":8},{"name":"彩电","categroy":1},{"name":"彩票","categroy":8},{"name":"菜","categroy":4},{"name":"餐盒","categroy":8},{"name":"餐巾","categroy":8},{"name":"餐纸","categroy":8},{"name":"西洋参","categroy":4},{"name":"蚕丝","categroy":1},{"name":"蚕豆壳","categroy":4},{"name":"残羹","categroy":4},{"name":"残花","categroy":4},{"name":"残枝","categroy":4},{"name":"苍蝇","categroy":4},{"name":"苍蝇拍","categroy":8},{"name":"草","categroy":4},{"name":"草莓","categroy":4},{"name":"厕纸","categroy":8},{"name":"厕所纸","categroy":8},{"name":"手册","categroy":1},{"name":"相册","categroy":8},{"name":"宣传册","categroy":1},{"name":"插排","categroy":1},{"name":"插头","categroy":1},{"name":"插座","categroy":1},{"name":"叉子","categroy":1},{"name":"塑料叉子","categroy":8},{"name":"一次性叉子","categroy":8},{"name":"茶","categroy":4},{"name":"茶包","categroy":8},{"name":"茶袋","categroy":8},{"name":"搽鼻涕纸","categroy":8},{"name":"火柴","categroy":8},{"name":"硅胶铲","categroy":8},{"name":"木铲板","categroy":1},{"name":"电器产品","categroy":1},{"name":"电子产品","categroy":1},{"name":"水产类弃物","categroy":4},{"name":"常温牛奶盒","categroy":1},{"name":"常温牛奶盒子","categroy":1},{"name":"平常喝的茶叶","categroy":4},{"name":"长靴","categroy":1},{"name":"长毛绒","categroy":1},{"name":"长生果","categroy":4},{"name":"红肠","categroy":4},{"name":"香肠","categroy":4},{"name":"鱼肠","categroy":4},{"name":"唱片","categroy":8},{"name":"黑胶唱片","categroy":8},{"name":"超能胶","categroy":8},{"name":"手抄报","categroy":8},{"name":"点钞机","categroy":1},{"name":"过朝食品","categroy":4},{"name":"防潮盒","categroy":1},{"name":"防潮剂","categroy":8},{"name":"吸潮剂","categroy":8},{"name":"炒面","categroy":4},{"name":"炒板栗","categroy":4},{"name":"炒花生壳","categroy":4},{"name":"尘土","categroy":8},{"name":"灰尘","categroy":8},{"name":"陈皮","categroy":4},{"name":"衬衫","categroy":1},{"name":"衬衣","categroy":1},{"name":"橙","categroy":4},{"name":"橙皮","categroy":4},{"name":"橙子","categroy":4},{"name":"中成药","categroy":2},{"name":"成人尿布","categroy":8},{"name":"集成电路板","categroy":1},{"name":"体重秤","categroy":1},{"name":"吃过的甘蔗","categroy":4},{"name":"吃剩的快餐","categroy":4},{"name":"吃过的棒棒糖","categroy":8},{"name":"钥匙","categroy":1},{"name":"车钥匙","categroy":8},{"name":"金属汤匙","categroy":1},{"name":"電池","categroy":2},{"name":"蓄电池","categroy":2},{"name":"充电电池","categroy":2},{"name":"齿轮","categroy":1},{"name":"牙齿","categroy":8},{"name":"掉下来的牙齿","categroy":8},{"name":"尺","categroy":8},{"name":"尺子","categroy":1},{"name":"铁尺","categroy":1},{"name":"鸡翅","categroy":4},{"name":"鸡翅骨头","categroy":4},{"name":"白炽灯","categroy":1},{"name":"白炽灯泡","categroy":2},{"name":"充电宝","categroy":1},{"name":"充电器","categroy":1},{"name":"充电线","categroy":1},{"name":"冲泡饮料","categroy":4},{"name":"虫","categroy":4},{"name":"虫子","categroy":4},{"name":"米虫","categroy":4},{"name":"宠物毛","categroy":8},{"name":"抽纸","categroy":8},{"name":"绸带","categroy":1},{"name":"丝绸制品","categroy":1},{"name":"臭豆腐","categroy":4},{"name":"臭鸡蛋","categroy":4},{"name":"臭袜子","categroy":8},{"name":"打印出来的纸","categroy":1},{"name":"厨余","categroy":4},{"name":"厨房纸","categroy":8},{"name":"厨房垃圾","categroy":4},{"name":"除草剂","categroy":2},{"name":"除湿盒","categroy":8},{"name":"除湿机","categroy":1},{"name":"传单","categroy":1},{"name":"传真机","categroy":1},{"name":"传真纸","categroy":1},{"name":"手串","categroy":8},{"name":"窗帘","categroy":1},{"name":"窗纱","categroy":8},{"name":"床单","categroy":1},{"name":"创可贴","categroy":8},{"name":"创口贴","categroy":8},{"name":"用的创可贴","categroy":8},{"name":"吹风机","categroy":1},{"name":"电吹风","categroy":1},{"name":"锤子","categroy":1},{"name":"铁锤","categroy":1},{"name":"春梅","categroy":4},{"name":"唇膏","categroy":8},{"name":"润唇膏","categroy":8},{"name":"磁带","categroy":8},{"name":"磁卡","categroy":8},{"name":"磁铁","categroy":1},{"name":"瓷片","categroy":8},{"name":"瓷器","categroy":8},{"name":"瓷碗","categroy":8},{"name":"鱼刺","categroy":4},{"name":"一次性碗","categroy":8},{"name":"一次塑料杯","categroy":8},{"name":"一次性杯子","categroy":8},{"name":"葱","categroy":4},{"name":"葱蒜","categroy":4},{"name":"大葱","categroy":4},{"name":"醋瓶","categroy":1},{"name":"脆骨","categroy":4},{"name":"水果脆","categroy":4},{"name":"内存条","categroy":1},{"name":"3.5英寸软盘","categroy":8},{"name":"打包袋","categroy":8},{"name":"打包盒","categroy":8},{"name":"打底裤","categroy":1},{"name":"担担面","categroy":4},{"name":"鸡毛掸","categroy":8},{"name":"鸡毛掸子","categroy":8},{"name":"海胆","categroy":4},{"name":"海胆壳","categroy":8},{"name":"鸡旦壳","categroy":4},{"name":"淡菜","categroy":4},{"name":"弹簧","categroy":1},{"name":"子弹","categroy":8},{"name":"蛋","categroy":4},{"name":"蛋糕","categroy":4},{"name":"蛋黄","categroy":4},{"name":"麦当劳纸袋","categroy":1},{"name":"刀片","categroy":1},{"name":"飞刀","categroy":1},{"name":"剪刀","categroy":1},{"name":"导线","categroy":1},{"name":"塑料管道","categroy":1},{"name":"拍立得","categroy":1},{"name":"的确良","categroy":1},{"name":"破的碗","categroy":8},{"name":"贝壳的肉","categroy":4},{"name":"灯管","categroy":2},{"name":"灯泡","categroy":2},{"name":"登山杖","categroy":1},{"name":"低温牛奶盒子","categroy":1},{"name":"竹笛","categroy":8},{"name":"底片","categroy":8},{"name":"粉底","categroy":8},{"name":"地毯","categroy":1},{"name":"烟蒂","categroy":8},{"name":"香烟蒂","categroy":8},{"name":"抽完的烟蒂","categroy":8},{"name":"快递袋","categroy":8},{"name":"快递盒","categroy":1},{"name":"快递箱","categroy":1},{"name":"糕点","categroy":4},{"name":"早点盒","categroy":8},{"name":"垫子","categroy":1},{"name":"护垫","categroy":8},{"name":"电灯","categroy":1},{"name":"电锅","categroy":1},{"name":"淀粉","categroy":4},{"name":"木雕","categroy":1},{"name":"掉落的头发","categroy":8},{"name":"吊牌","categroy":8},{"name":"衣服吊牌","categroy":1},{"name":"钓鱼竿","categroy":8},{"name":"钓鱼钩","categroy":8},{"name":"钓鱼线","categroy":8},{"name":"空调","categroy":1},{"name":"空调机","categroy":1},{"name":"空调扇","categroy":1},{"name":"碟片","categroy":8},{"name":"光碟","categroy":8},{"name":"碗碟","categroy":8},{"name":"丁字裤","categroy":8},{"name":"铁钉","categroy":1},{"name":"图钉","categroy":8},{"name":"洋钉","categroy":1},{"name":"机顶盒","categroy":1},{"name":"吸顶灯","categroy":2},{"name":"电视机顶盒","categroy":1},{"name":"订书钉","categroy":8},{"name":"订书机","categroy":1},{"name":"订书针","categroy":8},{"name":"冬瓜","categroy":4},{"name":"冬笋壳","categroy":4},{"name":"冬枣核","categroy":4},{"name":"动物毛","categroy":8},{"name":"果冻","categroy":4},{"name":"果冻盒","categroy":8},{"name":"冷冻食品","categroy":4},{"name":"电熨斗","categroy":1},{"name":"水斗漏网","categroy":8},{"name":"大豆","categroy":4},{"name":"豆腐","categroy":4},{"name":"豆类","categroy":4},{"name":"毒鼠强","categroy":2},{"name":"杀毒剂","categroy":2},{"name":"消毒药片","categroy":2},{"name":"电子书阅读器","categroy":1},{"name":"杜蕾斯","categroy":8},{"name":"温度计","categroy":2},{"name":"废温度计","categroy":2},{"name":"电子温度计","categroy":1},{"name":"短裤","categroy":8},{"name":"缎带","categroy":1},{"name":"多肉","categroy":4},{"name":"多肉植物","categroy":4},{"name":"养乐多瓶","categroy":1},{"name":"花朵","categroy":4},{"name":"鹅","categroy":4},{"name":"儿童玩具","categroy":1},{"name":"婴儿尿布","categroy":8},{"name":"耳环","categroy":1},{"name":"耳机","categroy":1},{"name":"耳屎","categroy":8},{"name":"二手衣物","categroy":1},{"name":"发胶","categroy":8},{"name":"发蜡","categroy":8},{"name":"发票","categroy":8},{"name":"盐酸伐昔洛韦片","categroy":2},{"name":"书法纸","categroy":1},{"name":"帆布包","categroy":1},{"name":"番茄","categroy":4},{"name":"番薯","categroy":4},{"name":"番茄酱","categroy":4},{"name":"饭","categroy":4},{"name":"菜饭","categroy":4},{"name":"饭菜","categroy":4},{"name":"魔方","categroy":8},{"name":"方便筷","categroy":8},{"name":"方便面","categroy":4},{"name":"防腐剂","categroy":8},{"name":"纺织布","categroy":1},{"name":"纺织品","categroy":1},{"name":"纺织物","categroy":1},{"name":"放大镜","categroy":1},{"name":"录放机","categroy":1},{"name":"咖啡","categroy":4},{"name":"咖啡包","categroy":4},{"name":"咖啡袋","categroy":8},{"name":"飞机杯","categroy":8},{"name":"肥料","categroy":8},{"name":"肥皂","categroy":8},{"name":"花肥","categroy":8},{"name":"夫妻肺片","categroy":4},{"name":"废铝","categroy":1},{"name":"废书","categroy":1},{"name":"废铁","categroy":1},{"name":"电费账单","categroy":1},{"name":"粉笔","categroy":8},{"name":"信封","categroy":1},{"name":"封箱带","categroy":8},{"name":"密封袋","categroy":8},{"name":"蜂蜜罐","categroy":1},{"name":"风扇","categroy":1},{"name":"风衣","categroy":1},{"name":"风筝","categroy":8},{"name":"缝纫针","categroy":8},{"name":"敷料","categroy":8},{"name":"护肤品","categroy":8},{"name":"润肤霜","categroy":1},{"name":"护肤霜瓶","categroy":1},{"name":"服装","categroy":1},{"name":"衣服","categroy":1},{"name":"废衣服","categroy":1},{"name":"腐肉","categroy":4},{"name":"复写纸","categroy":8},{"name":"复印机","categroy":1},{"name":"复印纸","categroy":1},{"name":"富贵竹","categroy":4},{"name":"高附加值可回收物","categroy":1},{"name":"咖啡纸杯(内表面附塑料膜)","categroy":8},{"name":"涂改笔","categroy":8},{"name":"氯化钙除湿剂","categroy":8},{"name":"笔盖","categroy":8},{"name":"锅盖","categroy":8},{"name":"铝盖","categroy":1},{"name":"干果","categroy":4},{"name":"干花","categroy":8},{"name":"甘蔗","categroy":4},{"name":"甘蔗皮","categroy":8},{"name":"甘蔗渣","categroy":4},{"name":"笔杆","categroy":8},{"name":"晾衣杆","categroy":1},{"name":"桔柑","categroy":4},{"name":"竹竿","categroy":8},{"name":"鸡肝","categroy":4},{"name":"感光片","categroy":2},{"name":"感冒药","categroy":2},{"name":"感光胶片","categroy":2},{"name":"麦秆","categroy":4},{"name":"钢笔","categroy":8},{"name":"烟缸","categroy":1},{"name":"鱼缸","categroy":1},{"name":"高粱","categroy":4},{"name":"乐高","categroy":1},{"name":"高跟鞋","categroy":1},{"name":"石膏","categroy":8},{"name":"牙膏","categroy":8},{"name":"糕饼","categroy":4},{"name":"草稿纸","categroy":8},{"name":"写过的草稿纸","categroy":1},{"name":"广告单","categroy":1},{"name":"广告纸","categroy":1},{"name":"小广告","categroy":1},{"name":"大哥大","categroy":1},{"name":"鸽子","categroy":4},{"name":"皮革","categroy":1},{"name":"旧包皮革","categroy":1},{"name":"皮革制品","categroy":1},{"name":"蛤蜊","categroy":4},{"name":"蛤蟆","categroy":4},{"name":"花蛤","categroy":4},{"name":"隔离霜","categroy":8},{"name":"隔夜菜","categroy":4},{"name":"个人计算机","categroy":1},{"name":"各式皮包","categroy":1},{"name":"各类刀、刀片","categroy":1},{"name":"各类过期食品","categroy":4},{"name":"菜根","categroy":4},{"name":"树根","categroy":4},{"name":"菜梗","categroy":4},{"name":"桔梗","categroy":4},{"name":"菜梗菜叶","categroy":4},{"name":"工资卡","categroy":1},{"name":"美工刀","categroy":1},{"name":"公仔","categroy":1},{"name":"公交卡","categroy":1},{"name":"含汞体温计","categroy":2},{"name":"含汞温度计","categroy":2},{"name":"含汞血压计","categroy":2},{"name":"铁钩","categroy":1},{"name":"勾线笔","categroy":8},{"name":"水垢","categroy":8},{"name":"购物纸袋","categroy":1},{"name":"塑料购物袋","categroy":8},{"name":"纸质购物袋","categroy":1},{"name":"菌菇","categroy":4},{"name":"蘑菇","categroy":4},{"name":"香菇","categroy":4},{"name":"晒鼓墨盒","categroy":1},{"name":"古筝","categroy":1},{"name":"大骨","categroy":8},{"name":"谷物","categroy":4},{"name":"鸡屁股","categroy":4},{"name":"鸭屁股","categroy":4},{"name":"烟屁股","categroy":8},{"name":"固体胶","categroy":8},{"name":"雨刮器","categroy":8},{"name":"刮胡子刀片","categroy":1},{"name":"汽车雨刮器","categroy":8},{"name":"瓜","categroy":4},{"name":"瓜果","categroy":4},{"name":"挂历","categroy":1},{"name":"挂钟","categroy":1},{"name":"挂号纸","categroy":1},{"name":"铝管","categroy":1},{"name":"吸管","categroy":8},{"name":"罐头","categroy":1},{"name":"铝罐","categroy":1},{"name":"陶罐","categroy":8},{"name":"光盘","categroy":8},{"name":"光驱","categroy":1},{"name":"玫瑰","categroy":4},{"name":"玫瑰花","categroy":4},{"name":"干枯玫瑰花","categroy":4},{"name":"硅胶","categroy":8},{"name":"乌龟壳","categroy":8},{"name":"桂圆","categroy":4},{"name":"桂圆核","categroy":4},{"name":"桂圆壳","categroy":4},{"name":"铁棍","categroy":1},{"name":"冰棍棒","categroy":8},{"name":"糖葫芦棍","categroy":8},{"name":"锅","categroy":1},{"name":"过滤盒","categroy":8},{"name":"过滤器","categroy":8},{"name":"哈密瓜皮","categroy":4},{"name":"孩子尿片","categroy":8},{"name":"小孩尿布","categroy":8},{"name":"海带","categroy":4},{"name":"有害垃圾","categroy":2},{"name":"含油抹布","categroy":8},{"name":"焊丝","categroy":1},{"name":"汗衫","categroy":1},{"name":"记号笔","categroy":8},{"name":"取号纸","categroy":8},{"name":"喝过的茶叶","categroy":4},{"name":"喝完的药瓶","categroy":2},{"name":"喝过的茶叶渣","categroy":4},{"name":"荷包蛋","categroy":4},{"name":"果核","categroy":4},{"name":"梨核","categroy":4},{"name":"桃核","categroy":4},{"name":"糖和藕粉","categroy":4},{"name":"铝合金","categroy":1},{"name":"复合包装","categroy":8},{"name":"合金玩具","categroy":1},{"name":"笔盒","categroy":1},{"name":"饭盒","categroy":8},{"name":"河豚","categroy":4},{"name":"贺卡","categroy":1},{"name":"黑豆","categroy":4},{"name":"黑猪","categroy":4},{"name":"烘干机","categroy":1},{"name":"烘手器","categroy":1},{"name":"红笔","categroy":8},{"name":"红薯","categroy":4},{"name":"猕猴桃","categroy":4},{"name":"厚纸板","categroy":1},{"name":"厚塑料袋","categroy":8},{"name":"厚型塑料袋","categroy":8},{"name":"粉碎后的打印纸","categroy":8},{"name":"洗净后的牛奶盒","categroy":1},{"name":"打印后的彩色照片","categroy":2},{"name":"呼叫器","categroy":1},{"name":"珊瑚","categroy":8},{"name":"茶壶","categroy":8},{"name":"油壶","categroy":1},{"name":"玻璃壶","categroy":1},{"name":"胡子","categroy":8},{"name":"胡椒粉","categroy":4},{"name":"浆糊","categroy":8},{"name":"虎牙","categroy":8},{"name":"护目镜","categroy":8},{"name":"花","categroy":4},{"name":"菜花","categroy":4},{"name":"华为手机","categroy":1},{"name":"金华火腿","categroy":4},{"name":"精华液瓶","categroy":1},{"name":"防滑垫","categroy":1},{"name":"润滑剂","categroy":8},{"name":"润滑油","categroy":8},{"name":"画笔","categroy":8},{"name":"画纸","categroy":1},{"name":"胶画","categroy":8},{"name":"绿化","categroy":4},{"name":"钢化膜","categroy":1},{"name":"电话","categroy":1},{"name":"话梅","categroy":4},{"name":"话筒","categroy":1},{"name":"坏发卡","categroy":8},{"name":"坏钢笔","categroy":8},{"name":"手环","categroy":8},{"name":"环保袋","categroy":1},{"name":"黄豆","categroy":4},{"name":"黄瓜","categroy":4},{"name":"灰","categroy":8},{"name":"徽章","categroy":8},{"name":"回收物","categroy":1},{"name":"回形针","categroy":8},{"name":"可回收","categroy":1},{"name":"花卉","categroy":4},{"name":"花卉绿植","categroy":4},{"name":"花卉植物","categroy":4},{"name":"会员卡","categroy":1},{"name":"婚戒","categroy":1},{"name":"结婚证书","categroy":1},{"name":"活性炭","categroy":8},{"name":"活性炭滤芯","categroy":8},{"name":"火锅","categroy":4},{"name":"干货","categroy":4},{"name":"干垃圾","categroy":8},{"name":"干拉圾","categroy":8},{"name":"垃圾袋","categroy":8},{"name":"火机","categroy":8},{"name":"积木","categroy":1},{"name":"木积木","categroy":1},{"name":"塑料积木","categroy":1},{"name":"冰激淋","categroy":4},{"name":"冰激凌","categroy":4},{"name":"冰激凌木棒","categroy":8},{"name":"鸡","categroy":4},{"name":"鸡蛋","categroy":4},{"name":"书籍","categroy":1},{"name":"水产及其加工食品","categroy":4},{"name":"食物残渣及宠物饲料","categroy":4},{"name":"急支糖浆","categroy":2},{"name":"月季","categroy":4},{"name":"药剂","categroy":2},{"name":"除湿剂","categroy":8},{"name":"计算机","categroy":1},{"name":"计算器","categroy":1},{"name":"体温计","categroy":2},{"name":"笔记本","categroy":1},{"name":"笔记本纸","categroy":1},{"name":"夹克","categroy":1},{"name":"衣夹","categroy":8},{"name":"马夹袋","categroy":8},{"name":"家电","categroy":1},{"name":"废家电","categroy":1},{"name":"加湿器","categroy":1},{"name":"加工类食品","categroy":4},{"name":"肉蛋加工食品","categroy":4},{"name":"花甲","categroy":4},{"name":"甲油","categroy":2},{"name":"甲鱼","categroy":4},{"name":"高铁酸钾","categroy":2},{"name":"假发","categroy":8},{"name":"假牙","categroy":8},{"name":"假发套","categroy":8},{"name":"铁架","categroy":1},{"name":"坚果","categroy":8},{"name":"坚果壳","categroy":8},{"name":"坚果果壳","categroy":8},{"name":"卫生间纸","categroy":8},{"name":"打印间碎纸","categroy":1},{"name":"卫生间废纸","categroy":8},{"name":"煎鍋","categroy":1},{"name":"生煎","categroy":4},{"name":"生煎包","categroy":4},{"name":"碱性无汞电池","categroy":8},{"name":"剪纸","categroy":8},{"name":"剪子","categroy":1},{"name":"键盘","categroy":1},{"name":"废键盘","categroy":1},{"name":"文件袋","categroy":8},{"name":"文件夹","categroy":1},{"name":"过期保健品","categroy":2},{"name":"蜜饯","categroy":4},{"name":"姜","categroy":4},{"name":"生姜","categroy":4},{"name":"麻将牌","categroy":8},{"name":"麻将台","categroy":1},{"name":"豆浆袋","categroy":8},{"name":"豆浆袋子","categroy":8},{"name":"果酱","categroy":4},{"name":"酱料","categroy":4},{"name":"酱汁","categroy":4},{"name":"可降解塑料","categroy":1},{"name":"可降解垃圾袋","categroy":4},{"name":"可降解塑料袋","categroy":8},{"name":"香蕉","categroy":4},{"name":"烂香蕉","categroy":4},{"name":"菜椒","categroy":4},{"name":"花椒","categroy":4},{"name":"辣椒","categroy":4},{"name":"交通卡","categroy":1},{"name":"木质搅拌棒","categroy":8},{"name":"泔脚","categroy":4},{"name":"脚皮","categroy":8},{"name":"猪脚","categroy":4},{"name":"菱角","categroy":4},{"name":"牛角","categroy":8},{"name":"饺子","categroy":4},{"name":"水饺","categroy":4},{"name":"水饺袋","categroy":8},{"name":"污染较严重的纸张","categroy":8},{"name":"接线板","categroy":1},{"name":"节能灯","categroy":2},{"name":"废节能灯","categroy":2},{"name":"节能灯管","categroy":2},{"name":"桔","categroy":4},{"name":"假睫毛","categroy":8},{"name":"睫毛膏","categroy":8},{"name":"睫毛刷","categroy":8},{"name":"清洁瓶","categroy":1},{"name":"毛豆结","categroy":4},{"name":"结成团的猫砂","categroy":8},{"name":"戒指","categroy":1},{"name":"金戒指","categroy":1},{"name":"毛巾","categroy":8},{"name":"湿巾","categroy":8},{"name":"牛筋","categroy":4},{"name":"皮筋","categroy":8},{"name":"黄金","categroy":1},{"name":"金属","categroy":8},{"name":"金鱼","categroy":4},{"name":"香烟灰烬","categroy":8},{"name":"根茎蔬菜","categroy":4},{"name":"蔬菜茎叶","categroy":4},{"name":"水果茎枝","categroy":4},{"name":"液晶屏","categroy":1},{"name":"液晶电视","categroy":1},{"name":"鸡精","categroy":4},{"name":"味精","categroy":4},{"name":"镜子","categroy":8},{"name":"墨镜","categroy":8},{"name":"眼镜","categroy":8},{"name":"净水器","categroy":1},{"name":"干净塑料","categroy":1},{"name":"净水滤芯","categroy":8},{"name":"韭菜","categroy":4},{"name":"针灸针","categroy":8},{"name":"酒酿","categroy":4},{"name":"酒瓶","categroy":1},{"name":"旧报","categroy":1},{"name":"旧书","categroy":1},{"name":"旧鞋","categroy":1},{"name":"聚乙烯饭盒","categroy":8},{"name":"收据","categroy":8},{"name":"数据线","categroy":1},{"name":"皮具","categroy":1},{"name":"蛋卷","categroy":4},{"name":"胶卷","categroy":2},{"name":"卷烟","categroy":8},{"name":"杀菌剂","categroy":2},{"name":"无菌包装塑料","categroy":8},{"name":"卡","categroy":8},{"name":"开心果","categroy":4},{"name":"开心果壳","categroy":8},{"name":"旧报刊","categroy":1},{"name":"糠","categroy":4},{"name":"糠饼","categroy":4},{"name":"考卷","categroy":1},{"name":"考试卷","categroy":1},{"name":"烤箱","categroy":1},{"name":"烧烤棒","categroy":8},{"name":"靠垫","categroy":1},{"name":"靠枕","categroy":1},{"name":"笔壳","categroy":8},{"name":"咳嗽糖浆","categroy":2},{"name":"可擦笔","categroy":8},{"name":"扑克","categroy":1},{"name":"马克笔","categroy":8},{"name":"空罐头","categroy":1},{"name":"空酒瓶","categroy":1},{"name":"遥控车","categroy":1},{"name":"遥控器","categroy":1},{"name":"空调遥控器","categroy":1},{"name":"口红","categroy":8},{"name":"口罩","categroy":8},{"name":"纽扣","categroy":8},{"name":"钮扣","categroy":8},{"name":"纽扣电池","categroy":2},{"name":"枯叶","categroy":4},{"name":"枯枝","categroy":4},{"name":"干枯花","categroy":4},{"name":"裤袜","categroy":1},{"name":"裤子","categroy":1},{"name":"铁块","categroy":1},{"name":"筷子","categroy":8},{"name":"木筷","categroy":1},{"name":"竹筷","categroy":8},{"name":"快餐盒","categroy":8},{"name":"塑料筐","categroy":1},{"name":"塑料篮筐","categroy":1},{"name":"塑料水果筐","categroy":1},{"name":"相框","categroy":1},{"name":"黑框眼镜","categroy":8},{"name":"矿水瓶","categroy":1},{"name":"矿泉水瓶","categroy":1},{"name":"矿泉水瓶子","categroy":1},{"name":"头盔","categroy":8},{"name":"葵花籽","categroy":4},{"name":"葵花子壳","categroy":4},{"name":"葵花籽壳","categroy":4},{"name":"死昆虫","categroy":4},{"name":"垃圾桶","categroy":1},{"name":"拉链","categroy":8},{"name":"拉拉裤","categroy":8},{"name":"蜡笔","categroy":8},{"name":"蜡纸","categroy":8},{"name":"腊肉","categroy":4},{"name":"辣酱","categroy":4},{"name":"辣条","categroy":4},{"name":"剩莱","categroy":4},{"name":"一次性莱盒","categroy":8},{"name":"自来水滤芯","categroy":8},{"name":"蓝莓干","categroy":4},{"name":"塑胶菜蓝子","categroy":1},{"name":"花篮","categroy":8},{"name":"篮球","categroy":1},{"name":"竹篮","categroy":8},{"name":"西兰花","categroy":4},{"name":"电缆","categroy":1},{"name":"烂桔","categroy":4},{"name":"烂桃","categroy":4},{"name":"烂菜叶","categroy":4},{"name":"槟榔","categroy":4},{"name":"榔头","categroy":1},{"name":"槟榔壳","categroy":4},{"name":"老鼠药","categroy":2},{"name":"死老鼠","categroy":4},{"name":"奶酪","categroy":4},{"name":"可乐杯","categroy":8},{"name":"可乐罐","categroy":1},{"name":"肋骨","categroy":8},{"name":"肋排","categroy":4},{"name":"布类","categroy":1},{"name":"蛋类","categroy":4},{"name":"擦眼泪的纸","categroy":8},{"name":"瓦楞纸","categroy":1},{"name":"冷饮","categroy":8},{"name":"冷饮棒","categroy":8},{"name":"冷饮袋","categroy":8},{"name":"车厘子","categroy":4},{"name":"梨","categroy":4},{"name":"离心纸","categroy":8},{"name":"钢笔里的墨囊","categroy":8},{"name":"纸制糖果礼盒","categroy":1},{"name":"荔枝核","categroy":4},{"name":"荔枝壳","categroy":4},{"name":"荔枝干壳","categroy":4},{"name":"栗子","categroy":4},{"name":"板栗壳","categroy":4},{"name":"可丽饼","categroy":4},{"name":"麦丽素","categroy":4},{"name":"日历","categroy":1},{"name":"台历","categroy":1},{"name":"便利贴","categroy":8},{"name":"乐利包","categroy":1},{"name":"利乐包","categroy":1},{"name":"果粒","categroy":4},{"name":"牛肉粒包装袋","categroy":8},{"name":"沥水架","categroy":1},{"name":"磁力片","categroy":8},{"name":"魔力擦","categroy":8},{"name":"巧克力","categroy":4},{"name":"琉璃","categroy":1},{"name":"联通卡","categroy":8},{"name":"莲藕","categroy":4},{"name":"莲蓬","categroy":4},{"name":"莲雾","categroy":4},{"name":"连裤袜","categroy":1},{"name":"连衣裙","categroy":1},{"name":"骨肉相连","categroy":4},{"name":"洗脸巾","categroy":8},{"name":"护脸霜瓶","categroy":1},{"name":"塑料脸盆","categroy":1},{"name":"项链","categroy":1},{"name":"金属拉链","categroy":1},{"name":"练习本","categroy":1},{"name":"狗粮","categroy":4},{"name":"粮食","categroy":4},{"name":"猫粮","categroy":4},{"name":"凉皮","categroy":4},{"name":"凉席","categroy":8},{"name":"空调两用风扇","categroy":1},{"name":"少量泥土","categroy":8},{"name":"晾衣架","categroy":1},{"name":"塑料晾衣架","categroy":1},{"name":"坏了的碗","categroy":1},{"name":"破了的碗","categroy":1},{"name":"坏了的玩具","categroy":1},{"name":"布料","categroy":1},{"name":"盘尼西林","categroy":2},{"name":"鱼鳞","categroy":4},{"name":"鱼鳞鱼肠","categroy":4},{"name":"冰淇淋","categroy":4},{"name":"零食","categroy":4},{"name":"零食袋","categroy":8},{"name":"零食罐","categroy":8},{"name":"哑铃","categroy":1},{"name":"马铃薯","categroy":4},{"name":"马铃薯片","categroy":4},{"name":"领带","categroy":1},{"name":"红领巾","categroy":1},{"name":"毛领子","categroy":1},{"name":"溜溜球","categroy":8},{"name":"榴莲干","categroy":4},{"name":"榴莲核","categroy":8},{"name":"榴莲壳","categroy":8},{"name":"镇流器","categroy":1},{"name":"电子镇流器","categroy":1},{"name":"龙虾","categroy":4},{"name":"大龙虾","categroy":4},{"name":"龙虾壳","categroy":4},{"name":"鸟笼","categroy":8},{"name":"芦荟","categroy":4},{"name":"芦稷","categroy":4},{"name":"芦稷皮","categroy":8},{"name":"甜卢蜀","categroy":4},{"name":"炉渣","categroy":8},{"name":"电磁炉","categroy":1},{"name":"电暖炉","categroy":1},{"name":"卤素灯","categroy":2},{"name":"卤素灯泡","categroy":2},{"name":"花露水瓶","categroy":1},{"name":"沐浴露瓶","categroy":1},{"name":"洗发露瓶","categroy":1},{"name":"电路板","categroy":1},{"name":"路由器","categroy":1},{"name":"线路板","categroy":1},{"name":"录像带","categroy":2},{"name":"录音机","categroy":1},{"name":"铝","categroy":1},{"name":"旅行袋","categroy":1},{"name":"旅游时报","categroy":1},{"name":"滤网","categroy":8},{"name":"滤芯","categroy":8},{"name":"绿豆","categroy":4},{"name":"绿萝","categroy":4},{"name":"海螺","categroy":4},{"name":"花螺","categroy":4},{"name":"螺帽","categroy":1},{"name":"绿箩","categroy":4},{"name":"落发","categroy":8},{"name":"落叶","categroy":4},{"name":"落花生","categroy":4},{"name":"姨妈巾","categroy":8},{"name":"老干妈辣酱","categroy":4},{"name":"麻布","categroy":1},{"name":"麻袋","categroy":8},{"name":"麻绳","categroy":8},{"name":"密码锁","categroy":1},{"name":"马肉","categroy":4},{"name":"买菜的包装袋","categroy":8},{"name":"麦子","categroy":4},{"name":"烧卖","categroy":4},{"name":"外卖盒","categroy":8},{"name":"外卖餐盒","categroy":8},{"name":"馒头","categroy":4},{"name":"蔓藤","categroy":4},{"name":"藤蔓","categroy":4},{"name":"漫画","categroy":1},{"name":"漫画书","categroy":1},{"name":"芒果","categroy":4},{"name":"芒果干","categroy":4},{"name":"芒果核","categroy":4},{"name":"貂毛","categroy":8},{"name":"狗毛","categroy":8},{"name":"帽子","categroy":1},{"name":"浴帽","categroy":8},{"name":"泡沫箱属于什么垃圾","categroy":1},{"name":"杨梅","categroy":4},{"name":"发霉食物","categroy":4},{"name":"煤饼","categroy":8},{"name":"煤灰","categroy":8},{"name":"煤渣","categroy":8},{"name":"没用过尿片","categroy":8},{"name":"没用过的纸杯","categroy":8},{"name":"没用过的尿不湿","categroy":8},{"name":"眉笔","categroy":8},{"name":"美瞳","categroy":8},{"name":"门锁","categroy":1},{"name":"柠檬","categroy":4},{"name":"米","categroy":4},{"name":"大米","categroy":4},{"name":"菠萝蜜","categroy":4},{"name":"棉","categroy":1},{"name":"海绵","categroy":8},{"name":"海绵垫","categroy":8},{"name":"海绵纸","categroy":8},{"name":"面","categroy":4},{"name":"面包","categroy":4},{"name":"灭火器","categroy":1},{"name":"灭蚊剂","categroy":2},{"name":"废灭火器","categroy":1},{"name":"玻璃器皿","categroy":1},{"name":"明信片","categroy":8},{"name":"三明治","categroy":4},{"name":"说明书","categroy":1},{"name":"名画","categroy":8},{"name":"名片","categroy":1},{"name":"塑料模型","categroy":1},{"name":"面膜","categroy":8},{"name":"磨刀器","categroy":1},{"name":"磨砂膏","categroy":8},{"name":"摩丝","categroy":8},{"name":"摩易擦","categroy":8},{"name":"魔笔","categroy":8},{"name":"抹布","categroy":8},{"name":"废抹布","categroy":8},{"name":"旧抹布","categroy":8},{"name":"速溶饮料粉末","categroy":4},{"name":"墨粉","categroy":8},{"name":"墨盒","categroy":1},{"name":"默写本","categroy":1},{"name":"泡沫","categroy":1},{"name":"肉沫","categroy":4},{"name":"泡沫板","categroy":1},{"name":"牡蛎壳","categroy":8},{"name":"牡蛎肉","categroy":4},{"name":"吃剩下的牡蛎壳","categroy":8},{"name":"屏幕","categroy":1},{"name":"荧幕","categroy":1},{"name":"电脑屏幕","categroy":1},{"name":"树叶是那种垃圾","categroy":4},{"name":"收纳箱","categroy":1},{"name":"塑料收纳盒","categroy":1},{"name":"奶粉","categroy":4},{"name":"奶盒","categroy":1},{"name":"南瓜","categroy":4},{"name":"南瓜皮","categroy":4},{"name":"南瓜子壳","categroy":4},{"name":"笔囊","categroy":8},{"name":"胶囊","categroy":2},{"name":"墨囊","categroy":8},{"name":"电脑","categroy":1},{"name":"猪脑","categroy":4},{"name":"电脑包","categroy":1},{"name":"闹钟","categroy":1},{"name":"内裤","categroy":8},{"name":"内衣","categroy":8},{"name":"内脏","categroy":4},{"name":"花泥","categroy":8},{"name":"尼龙绳","categroy":8},{"name":"尼龙丝袜","categroy":8},{"name":"尼龙制品","categroy":8},{"name":"油腻的餐巾纸","categroy":8},{"name":"年糕","categroy":4},{"name":"少年报","categroy":1},{"name":"尿布","categroy":8},{"name":"尿垫","categroy":8},{"name":"尿裤","categroy":8},{"name":"镍镉电池","categroy":2},{"name":"牛","categroy":4},{"name":"塑料纽扣","categroy":1},{"name":"农药片","categroy":2},{"name":"圣女果","categroy":4},{"name":"女生内衣","categroy":8},{"name":"女性卫生用品","categroy":8},{"name":"暖瓶","categroy":1},{"name":"保暖瓶","categroy":1},{"name":"呕吐包","categroy":8},{"name":"呕吐物","categroy":4},{"name":"布偶","categroy":1},{"name":"玩偶","categroy":1},{"name":"布玩偶","categroy":1},{"name":"手帕","categroy":8},{"name":"电蚊拍","categroy":1},{"name":"大排","categroy":4},{"name":"鸡排","categroy":4},{"name":"铜牌","categroy":1},{"name":"菠萝派","categroy":4},{"name":"U盘","categroy":1},{"name":"乒乓板","categroy":8},{"name":"乒乓球","categroy":8},{"name":"日抛美瞳","categroy":8},{"name":"灯炮","categroy":2},{"name":"泡面","categroy":4},{"name":"泡馍","categroy":4},{"name":"水培植物","categroy":4},{"name":"电脑配件","categroy":1},{"name":"铝喷雾瓶","categroy":1},{"name":"喷蟑螂瓶","categroy":2},{"name":"杀虫喷雾","categroy":2},{"name":"花盆","categroy":8},{"name":"铝盆","categroy":1},{"name":"盆栽","categroy":4},{"name":"帐篷","categroy":1},{"name":"膨化食品","categroy":4},{"name":"膨化食品包装","categroy":8},{"name":"披萨","categroy":4},{"name":"雨披","categroy":8},{"name":"披萨盒","categroy":8},{"name":"啤酒盖","categroy":1},{"name":"啤酒罐","categroy":1},{"name":"啤酒瓶","categroy":1},{"name":"菜皮","categroy":4},{"name":"草皮","categroy":4},{"name":"漂白粉","categroy":8},{"name":"漂白剂罐","categroy":2},{"name":"票","categroy":8},{"name":"食品","categroy":4},{"name":"饰品","categroy":8},{"name":"药品","categroy":2},{"name":"苹果","categroy":4},{"name":"烂苹果","categroy":4},{"name":"苹果核","categroy":4},{"name":"平底锅","categroy":1},{"name":"平板玻璃","categroy":1},{"name":"平板电脑","categroy":1},{"name":"电瓶","categroy":1},{"name":"破布","categroy":1},{"name":"破碗","categroy":8},{"name":"破瓷品","categroy":8},{"name":"扑克牌","categroy":1},{"name":"猪肉铺","categroy":4},{"name":"葡萄","categroy":4},{"name":"葡萄皮","categroy":4},{"name":"普通塑料袋","categroy":8},{"name":"过期药","categroy":2},{"name":"过期饼干","categroy":4},{"name":"漆桶","categroy":2},{"name":"油漆","categroy":2},{"name":"废油漆","categroy":2},{"name":"其他垃圾桶","categroy":1},{"name":"象棋","categroy":8},{"name":"曲奇","categroy":4},{"name":"吃过的奇趣蛋","categroy":8},{"name":"电器","categroy":1},{"name":"陶器","categroy":8},{"name":"气球","categroy":8},{"name":"充气娃","categroy":1},{"name":"煤气罐","categroy":1},{"name":"废弃布包","categroy":1},{"name":"废弃地毯","categroy":1},{"name":"废弃电线","categroy":1},{"name":"铅笔","categroy":8},{"name":"铅桶","categroy":1},{"name":"铅芯","categroy":8},{"name":"棉签","categroy":8},{"name":"指甲钳","categroy":1},{"name":"金枪鱼罐头","categroy":1},{"name":"墙刷","categroy":8},{"name":"一块墙皮","categroy":8},{"name":"强化玻璃","categroy":1},{"name":"敲碎的碗","categroy":8},{"name":"巧克力袋子","categroy":8},{"name":"巧克力盒子","categroy":8},{"name":"茄子","categroy":4},{"name":"电子琴","categroy":1},{"name":"芹菜","categroy":4},{"name":"芹菜叶","categroy":4},{"name":"家禽内脏","categroy":4},{"name":"青菜","categroy":4},{"name":"氢气罐","categroy":1},{"name":"氢气球","categroy":8},{"name":"氢气球充气钢瓶","categroy":1},{"name":"滤清器","categroy":8},{"name":"汽车空气滤清器","categroy":1},{"name":"情趣内衣","categroy":8},{"name":"琼脂","categroy":4},{"name":"营养琼脂","categroy":4},{"name":"秋衣","categroy":1},{"name":"棉球","categroy":8},{"name":"皮球","categroy":1},{"name":"驱蚊瓶","categroy":1},{"name":"发圈","categroy":8},{"name":"铁圈","categroy":1},{"name":"甜甜圈","categroy":4},{"name":"围裙","categroy":1},{"name":"燃油罐","categroy":1},{"name":"染发剂罐","categroy":2},{"name":"染发剂壳","categroy":2},{"name":"污染报纸","categroy":8},{"name":"丝瓜瓤","categroy":4},{"name":"电热毯","categroy":1},{"name":"退热贴","categroy":8},{"name":"电热水袋","categroy":1},{"name":"杏仁","categroy":4},{"name":"瓜子仁","categroy":4},{"name":"虾仁壳","categroy":4},{"name":"无人机","categroy":1},{"name":"仙人球","categroy":4},{"name":"日报","categroy":1},{"name":"日光灯","categroy":2},{"name":"有机溶剂","categroy":2},{"name":"速溶咖啡包装","categroy":8},{"name":"电容器","categroy":1},{"name":"美容仪","categroy":1},{"name":"玻璃制容器","categroy":1},{"name":"绒娃娃","categroy":1},{"name":"绒线衣","categroy":1},{"name":"羽绒被","categroy":1},{"name":"棉柔巾","categroy":8},{"name":"肉","categroy":4},{"name":"大骨（如：猪腿骨）","categroy":8},{"name":"乳牙","categroy":8},{"name":"豆腐乳","categroy":4},{"name":"沐浴乳","categroy":8},{"name":"入厕用纸","categroy":8},{"name":"软骨","categroy":4},{"name":"软盘","categroy":8},{"name":"软糖","categroy":4},{"name":"润发乳","categroy":8},{"name":"花洒","categroy":1},{"name":"披萨饼盒","categroy":8},{"name":"木塞","categroy":8},{"name":"软木塞","categroy":8},{"name":"酒瓶塞子","categroy":8},{"name":"三杯鸡","categroy":4},{"name":"三文鱼","categroy":4},{"name":"伞","categroy":8},{"name":"雨伞","categroy":8},{"name":"旧雨伞","categroy":8},{"name":"散粉","categroy":8},{"name":"桑叶","categroy":4},{"name":"扫帚","categroy":8},{"name":"扫地机","categroy":1},{"name":"彩色笔","categroy":8},{"name":"标签色带","categroy":8},{"name":"彩色玻璃","categroy":1},{"name":"猫砂","categroy":8},{"name":"砂锅","categroy":8},{"name":"砂皮","categroy":8},{"name":"杀虫剂","categroy":2},{"name":"猫沙","categroy":8},{"name":"纱布","categroy":8},{"name":"纱窗","categroy":8},{"name":"防晒霜","categroy":8},{"name":"防晒霜罐","categroy":1},{"name":"山芋","categroy":4},{"name":"山竹","categroy":4},{"name":"羊毛衫","categroy":1},{"name":"电扇","categroy":1},{"name":"烫伤膏","categroy":2},{"name":"纸质商标","categroy":8},{"name":"上衣","categroy":1},{"name":"床上用品","categroy":1},{"name":"烧鸡","categroy":4},{"name":"红烧肉","categroy":4},{"name":"勺子","categroy":1},{"name":"塑料勺","categroy":8},{"name":"蛇皮袋","categroy":1},{"name":"摄像机","categroy":1},{"name":"摄像头","categroy":1},{"name":"注射器","categroy":8},{"name":"无菌注射器包装","categroy":8},{"name":"养身壶","categroy":1},{"name":"花生","categroy":4},{"name":"生菜","categroy":4},{"name":"生蚝","categroy":4},{"name":"棉绳","categroy":8},{"name":"绳子","categroy":1},{"name":"盛装湿垃圾的垃圾袋","categroy":8},{"name":"剩菜","categroy":4},{"name":"剩餐","categroy":4},{"name":"剩饭","categroy":4},{"name":"螺狮","categroy":4},{"name":"螺狮壳","categroy":4},{"name":"施工安全帽","categroy":1},{"name":"湿纸","categroy":8},{"name":"使用的餐巾纸","categroy":8},{"name":"使用过的餐盒","categroy":8},{"name":"使用过的猫砂","categroy":8},{"name":"废台式机","categroy":1},{"name":"硬式磁碟机","categroy":1},{"name":"显示器","categroy":1},{"name":"显示屏幕","categroy":1},{"name":"芝士","categroy":4},{"name":"芝士片","categroy":4},{"name":"西红柿","categroy":4},{"name":"乐事薯片","categroy":4},{"name":"擦拭过的餐巾纸","categroy":8},{"name":"油漆稀释剂","categroy":2},{"name":"电视","categroy":1},{"name":"电视机","categroy":1},{"name":"废电视","categroy":1},{"name":"试卷","categroy":1},{"name":"试纸","categroy":8},{"name":"寿司","categroy":4},{"name":"受污纸巾","categroy":8},{"name":"受潮的纸张","categroy":1},{"name":"受过污染的纸","categroy":8},{"name":"蔬菜","categroy":4},{"name":"蔬果","categroy":4},{"name":"烂蔬菜","categroy":4},{"name":"木梳","categroy":1},{"name":"梳子","categroy":8},{"name":"木梳子","categroy":1},{"name":"书","categroy":1},{"name":"熟菜","categroy":4},{"name":"熟鸡蛋","categroy":4},{"name":"熟虾壳","categroy":4},{"name":"薯片","categroy":4},{"name":"甜芦黍","categroy":4},{"name":"废金属","categroy":1},{"name":"金属罐","categroy":1},{"name":"美术袋","categroy":8},{"name":"美术黏土","categroy":8},{"name":"树皮","categroy":4},{"name":"数学书","categroy":1},{"name":"漱口水瓶子","categroy":1},{"name":"牙刷","categroy":8},{"name":"化妆刷","categroy":8},{"name":"面霜","categroy":8},{"name":"眼霜","categroy":8},{"name":"双面胶","categroy":8},{"name":"双面胶带","categroy":8},{"name":"爽肤水瓶","categroy":1},{"name":"胶水","categroy":8},{"name":"水笔","categroy":8},{"name":"水彩","categroy":8},{"name":"纸质说明书","categroy":1},{"name":"瓦斯桶","categroy":1},{"name":"手撕猪肉","categroy":4},{"name":"钢丝","categroy":1},{"name":"死花","categroy":4},{"name":"饲料","categroy":4},{"name":"猫饲料","categroy":4},{"name":"饲料袋","categroy":8},{"name":"松子","categroy":4},{"name":"松子壳","categroy":4},{"name":"松木猫砂","categroy":8},{"name":"素菜","categroy":4},{"name":"快速面盒","categroy":8},{"name":"速冻饺子","categroy":4},{"name":"速冻水饺","categroy":4},{"name":"粟子壳","categroy":4},{"name":"甜芦粟","categroy":4},{"name":"甜芦粟皮","categroy":8},{"name":"塑料","categroy":1},{"name":"废塑料","categroy":1},{"name":"酸奶袋","categroy":8},{"name":"酸奶盖","categroy":8},{"name":"蒜","categroy":4},{"name":"大蒜","categroy":4},{"name":"废弃计算机","categroy":1},{"name":"碎布","categroy":1},{"name":"碎瓷","categroy":8},{"name":"碎骨","categroy":4},{"name":"玉米穗","categroy":4},{"name":"破损瓷器","categroy":8},{"name":"污损纸张","categroy":8},{"name":"破损垃圾袋","categroy":8},{"name":"笋壳","categroy":4},{"name":"笋皮","categroy":4},{"name":"竹笋","categroy":4},{"name":"梭子蟹","categroy":4},{"name":"压缩瓶","categroy":1},{"name":"锁","categroy":1},{"name":"锁头","categroy":1},{"name":"厕所手纸","categroy":8},{"name":"蛋挞","categroy":4},{"name":"蛋挞壳","categroy":8},{"name":"蛋挞皮","categroy":4},{"name":"废踏垫","categroy":8},{"name":"脚踏板","categroy":8},{"name":"海苔","categroy":4},{"name":"海苔袋子","categroy":8},{"name":"台灯","categroy":1},{"name":"印台","categroy":8},{"name":"太阳帽","categroy":1},{"name":"太阳能热水管","categroy":1},{"name":"太阳能热水器","categroy":1},{"name":"痰盂罐","categroy":1},{"name":"毛毯","categroy":1},{"name":"碳灰","categroy":8},{"name":"碳粉匣","categroy":1},{"name":"碳纤维","categroy":8},{"name":"木炭","categroy":8},{"name":"炭包","categroy":8},{"name":"汤骨","categroy":8},{"name":"鱼汤","categroy":4},{"name":"火锅汤底","categroy":4},{"name":"搪瓷","categroy":1},{"name":"搪瓷杯","categroy":8},{"name":"搪瓷碗","categroy":1},{"name":"糖","categroy":4},{"name":"红糖","categroy":4},{"name":"麻辣烫","categroy":4},{"name":"黄桃","categroy":4},{"name":"桃板","categroy":4},{"name":"淘宝纸盒","categroy":1},{"name":"碎陶","categroy":8},{"name":"陶瓷","categroy":8},{"name":"笔套","categroy":8},{"name":"耳套","categroy":1},{"name":"藤席","categroy":8},{"name":"旧手提包","categroy":1},{"name":"手提电脑","categroy":1},{"name":"蹄髈","categroy":4},{"name":"猪蹄","categroy":4},{"name":"擦鼻涕纸","categroy":8},{"name":"剃须刀","categroy":1},{"name":"剃须刀片","categroy":1},{"name":"剃须泡瓶","categroy":1},{"name":"泡沫填充","categroy":8},{"name":"田螺","categroy":4},{"name":"甜瓜","categroy":4},{"name":"布条","categroy":1},{"name":"面条","categroy":4},{"name":"跳蛋","categroy":8},{"name":"跳跳糖包装袋","categroy":8},{"name":"贴纸","categroy":8},{"name":"铁","categroy":1},{"name":"暖宝宝帖","categroy":8},{"name":"餐厅纸","categroy":8},{"name":"家庭花卉","categroy":4},{"name":"家庭绿化","categroy":4},{"name":"家庭盆栽树叶","categroy":4},{"name":"铜皮","categroy":1},{"name":"废铜烂铁","categroy":1},{"name":"儿童尿不湿","categroy":8},{"name":"儿童电动玩具","categroy":1},{"name":"木桶","categroy":1},{"name":"筒骨","categroy":8},{"name":"针筒","categroy":2},{"name":"骨头","categroy":8},{"name":"透明胶","categroy":8},{"name":"透明胶带","categroy":8},{"name":"一次性透明盒子","categroy":8},{"name":"地图","categroy":1},{"name":"图画","categroy":8},{"name":"涂料","categroy":2},{"name":"涂料桶","categroy":2},{"name":"屠龙刀","categroy":1},{"name":"土豆","categroy":4},{"name":"兔肉","categroy":4},{"name":"兔头","categroy":4},{"name":"饭团","categroy":4},{"name":"线团","categroy":8},{"name":"纸团","categroy":8},{"name":"火腿","categroy":4},{"name":"鸡腿","categroy":4},{"name":"腿骨","categroy":8},{"name":"拖鞋","categroy":8},{"name":"蛋挞托","categroy":8},{"name":"食物托盘","categroy":1},{"name":"塑料托盘","categroy":1},{"name":"脱水机","categroy":1},{"name":"脱氧剂","categroy":8},{"name":"食品用脱氧剂","categroy":8},{"name":"牛蛙","categroy":4},{"name":"牛蛙骨头","categroy":4},{"name":"布娃娃","categroy":1},{"name":"棉袜","categroy":1},{"name":"丝袜","categroy":8},{"name":"外套","categroy":1},{"name":"水笔外壳","categroy":8},{"name":"豌豆壳","categroy":4},{"name":"豌豆殼","categroy":4},{"name":"玩具","categroy":1},{"name":"药丸","categroy":2},{"name":"蟑螂丸","categroy":2},{"name":"擦完嘴的纸","categroy":8},{"name":"碗","categroy":8},{"name":"茶碗","categroy":8},{"name":"万能胶水","categroy":8},{"name":"网线","categroy":1},{"name":"鱼网","categroy":8},{"name":"望远镜","categroy":1},{"name":"夏威夷果","categroy":8},{"name":"夏威夷果壳","categroy":8},{"name":"夏威夷果的壳","categroy":8},{"name":"围巾","categroy":1},{"name":"华为P20","categroy":1},{"name":"维生素","categroy":2},{"name":"人造纤维","categroy":8},{"name":"芦苇叶","categroy":8},{"name":"枯萎的花","categroy":4},{"name":"枯萎的鲜花","categroy":4},{"name":"牛尾","categroy":4},{"name":"燕尾夹","categroy":1},{"name":"长尾夹","categroy":1},{"name":"未使用的餐巾纸","categroy":8},{"name":"调味袋","categroy":8},{"name":"调味料","categroy":4},{"name":"自慰棒","categroy":1},{"name":"自慰器","categroy":1},{"name":"卫衣","categroy":1},{"name":"卫生巾","categroy":8},{"name":"保温杯","categroy":1},{"name":"保温棉","categroy":8},{"name":"保温瓶","categroy":1},{"name":"蚊香","categroy":8},{"name":"蚊帐","categroy":1},{"name":"蚊子","categroy":4},{"name":"文胸","categroy":8},{"name":"文竹","categroy":4},{"name":"公文包","categroy":1},{"name":"蜗牛壳","categroy":8},{"name":"燕窝","categroy":4},{"name":"钨丝","categroy":1},{"name":"钨丝灯泡","categroy":2},{"name":"污水袋","categroy":8},{"name":"油污布","categroy":8},{"name":"无纺布","categroy":1},{"name":"无纺布袋","categroy":1},{"name":"午饭","categroy":4},{"name":"午餐肉","categroy":4},{"name":"午餐肉罐","categroy":1},{"name":"西瓜","categroy":4},{"name":"西药","categroy":2},{"name":"西柚","categroy":4},{"name":"吸尘器","categroy":1},{"name":"稀饭","categroy":4},{"name":"草席","categroy":8},{"name":"洗发精","categroy":8},{"name":"洗发水","categroy":8},{"name":"游戏机","categroy":1},{"name":"虾","categroy":4},{"name":"虾壳","categroy":4},{"name":"吃剩下的葡萄杆","categroy":4},{"name":"仙人掌","categroy":4},{"name":"海鲜","categroy":4},{"name":"鲜花","categroy":4},{"name":"保鲜袋","categroy":8},{"name":"化纤衣物","categroy":1},{"name":"咸菜","categroy":4},{"name":"咸鱼","categroy":4},{"name":"咸鸭蛋壳","categroy":4},{"name":"显卡","categroy":1},{"name":"保险套","categroy":8},{"name":"保险箱","categroy":1},{"name":"线","categroy":8},{"name":"电线","categroy":1},{"name":"相机","categroy":1},{"name":"茴香","categroy":4},{"name":"冰箱","categroy":1},{"name":"机箱","categroy":1},{"name":"墨襄","categroy":8},{"name":"音响","categroy":1},{"name":"电脑小音响","categroy":1},{"name":"橡胶","categroy":8},{"name":"橡皮","categroy":8},{"name":"废橡胶","categroy":8},{"name":"象牙","categroy":8},{"name":"小刀","categroy":1},{"name":"小骨","categroy":4},{"name":"羊蝎子","categroy":8},{"name":"羊蝎子骨头","categroy":8},{"name":"鞋","categroy":1},{"name":"布鞋","categroy":1},{"name":"写字纸","categroy":1},{"name":"机械表","categroy":1},{"name":"卸妆巾","categroy":8},{"name":"卸妆棉","categroy":8},{"name":"卸妆油","categroy":8},{"name":"蟹","categroy":4},{"name":"螃蟹","categroy":4},{"name":"青蟹","categroy":4},{"name":"笔屑","categroy":8},{"name":"木屑","categroy":8},{"name":"皮屑","categroy":8},{"name":"笔芯","categroy":8},{"name":"玉米心","categroy":4},{"name":"信封带","categroy":1},{"name":"星巴克纸杯","categroy":8},{"name":"U型回形针","categroy":8},{"name":"隐形眼镜","categroy":8},{"name":"银行卡","categroy":1},{"name":"杏仁壳","categroy":4},{"name":"水性笔","categroy":8},{"name":"水性漆","categroy":2},{"name":"鸡胸","categroy":4},{"name":"胸罩","categroy":8},{"name":"修正带","categroy":8},{"name":"小修正带","categroy":8},{"name":"不锈钢刀","categroy":1},{"name":"不锈钢杯子","categroy":1},{"name":"绣花针","categroy":8},{"name":"胡须刀","categroy":1},{"name":"旧棉絮","categroy":1},{"name":"宣纸","categroy":8},{"name":"宣传单","categroy":1},{"name":"皮靴","categroy":1},{"name":"雨靴","categroy":1},{"name":"化学试剂包装玻璃瓶","categroy":2},{"name":"雪糕棒","categroy":8},{"name":"雪糕纸","categroy":8},{"name":"鸭血","categroy":4},{"name":"血压计","categroy":1},{"name":"压力罐","categroy":1},{"name":"压力锅","categroy":1},{"name":"鸭","categroy":4},{"name":"鸭骨","categroy":4},{"name":"绿豆芽","categroy":4},{"name":"牙","categroy":8},{"name":"雅漾喷雾","categroy":8},{"name":"亚克力","categroy":1},{"name":"亚克力板","categroy":1},{"name":"亚克力胶水","categroy":8},{"name":"香烟","categroy":8},{"name":"盐","categroy":4},{"name":"污染严重的纸","categroy":8},{"name":"污染严重的纸盒","categroy":8},{"name":"污染严重的纸张","categroy":8},{"name":"颜料","categroy":8},{"name":"颜料板","categroy":8},{"name":"颜料笔","categroy":8},{"name":"过期的燕麦片","categroy":4},{"name":"验孕棒","categroy":8},{"name":"羊骨","categroy":8},{"name":"羊毛","categroy":1},{"name":"洋装","categroy":1},{"name":"海洋球","categroy":1},{"name":"遮阳帽","categroy":1},{"name":"除氧剂","categroy":8},{"name":"环氧树脂","categroy":8},{"name":"养生壶","categroy":1},{"name":"家养绿植","categroy":4},{"name":"腰带","categroy":1},{"name":"腰果","categroy":4},{"name":"高裤腰带","categroy":8},{"name":"咬过的口香糖","categroy":8},{"name":"草药","categroy":4},{"name":"废药","categroy":2},{"name":"青椰","categroy":8},{"name":"椰壳","categroy":8},{"name":"椰子","categroy":8},{"name":"宣传页","categroy":1},{"name":"广告单页","categroy":1},{"name":"作业本","categroy":1},{"name":"叶","categroy":4},{"name":"菜叶","categroy":4},{"name":"隔夜饭","categroy":4},{"name":"乳液罐","categroy":1},{"name":"乳液瓶","categroy":1},{"name":"医用冰袋","categroy":8},{"name":"大衣","categroy":1},{"name":"移动电源","categroy":1},{"name":"移动硬盘","categroy":1},{"name":"行车记录仪","categroy":1},{"name":"易拉宝","categroy":1},{"name":"易拉罐","categroy":1},{"name":"音箱","categroy":1},{"name":"旧音箱","categroy":1},{"name":"水银","categroy":2},{"name":"收银条","categroy":8},{"name":"隐形眼镜片","categroy":8},{"name":"过期隐形眼镜","categroy":8},{"name":"印泥","categroy":8},{"name":"打印机","categroy":1},{"name":"英语书","categroy":1},{"name":"樱花","categroy":4},{"name":"樱桃","categroy":4},{"name":"樱桃核","categroy":4},{"name":"婴儿尿不湿","categroy":8},{"name":"婴儿纸尿裤","categroy":8},{"name":"萤石","categroy":8},{"name":"荧光棒","categroy":8},{"name":"荧光笔","categroy":8},{"name":"眼影","categroy":8},{"name":"电影票","categroy":8},{"name":"影印纸","categroy":1},{"name":"硬盘","categroy":1},{"name":"硬板纸","categroy":1},{"name":"硬贝壳","categroy":8},{"name":"游泳裤","categroy":1},{"name":"信用卡","categroy":1},{"name":"包装用纸","categroy":1},{"name":"厕所用纸","categroy":8},{"name":"优盘","categroy":1},{"name":"无线路由器","categroy":1},{"name":"黄油","categroy":4},{"name":"有机玻璃","categroy":1},{"name":"婴幼儿尿布","categroy":8},{"name":"旧衣服属于","categroy":1},{"name":"厨余果皮","categroy":4},{"name":"厨余垃圾","categroy":4},{"name":"鱼","categroy":4},{"name":"黄鱼","categroy":4},{"name":"雨鞋","categroy":1},{"name":"语文书","categroy":1},{"name":"羽毛","categroy":8},{"name":"羽毛球","categroy":8},{"name":"玉","categroy":8},{"name":"玉米","categroy":4},{"name":"玉镯","categroy":1},{"name":"芋艿","categroy":4},{"name":"芋头","categroy":4},{"name":"浴巾","categroy":8},{"name":"金属元件","categroy":1},{"name":"原味鸡","categroy":4},{"name":"原珠笔","categroy":8},{"name":"原子笔","categroy":8},{"name":"芋圆","categroy":4},{"name":"电源器","categroy":1},{"name":"电源线","categroy":1},{"name":"月饼","categroy":4},{"name":"月饼盒","categroy":1},{"name":"运动服","categroy":1},{"name":"运动鞋","categroy":1},{"name":"旧运动鞋","categroy":1},{"name":"牛杂","categroy":4},{"name":"杂草","categroy":4},{"name":"杂志","categroy":1},{"name":"盆栽树叶","categroy":4},{"name":"盆栽植物","categroy":4},{"name":"再生纸","categroy":1},{"name":"脏布","categroy":8},{"name":"鱼内脏","categroy":4},{"name":"枣","categroy":4},{"name":"红枣","categroy":4},{"name":"枣核","categroy":4},{"name":"洗澡掉的头发","categroy":8},{"name":"人造玻璃","categroy":1},{"name":"人造奶油","categroy":4},{"name":"香皂","categroy":8},{"name":"碎小肥皂","categroy":8},{"name":"干燥剂","categroy":8},{"name":"包装干燥剂","categroy":8},{"name":"石灰干燥剂","categroy":8},{"name":"扎带","categroy":8},{"name":"粽子 包扎线","categroy":8},{"name":"菜渣","categroy":4},{"name":"茶渣","categroy":4},{"name":"豆渣","categroy":4},{"name":"大闸蟹","categroy":4},{"name":"大闸蟹壳","categroy":4},{"name":"炸鸡","categroy":4},{"name":"粘纸","categroy":8},{"name":"粘鼠板","categroy":8},{"name":"沾有墨水的纸","categroy":8},{"name":"沾了油污的报纸","categroy":1},{"name":"沾了菜油的餐巾纸","categroy":1},{"name":"蘸酱","categroy":4},{"name":"蘸酱盒","categroy":8},{"name":"火锅蘸酱","categroy":4},{"name":"图章","categroy":8},{"name":"章鱼","categroy":4},{"name":"纸张","categroy":1},{"name":"废纸张","categroy":1},{"name":"纸张类","categroy":1},{"name":"擀面杖","categroy":1},{"name":"账单","categroy":1},{"name":"照片","categroy":8},{"name":"旧照片","categroy":2},{"name":"照片纸","categroy":2},{"name":"床罩","categroy":1},{"name":"奶罩","categroy":8},{"name":"折扇","categroy":8},{"name":"蔗糖","categroy":4},{"name":"珍珠","categroy":1},{"name":"黑珍猪","categroy":4},{"name":"珍珠米","categroy":4},{"name":"真空袋","categroy":8},{"name":"砧板","categroy":1},{"name":"木砧板","categroy":1},{"name":"针","categroy":8},{"name":"针管","categroy":2},{"name":"枕套","categroy":1},{"name":"震动棒","categroy":1},{"name":"蒸汽眼罩","categroy":8},{"name":"修正带内芯","categroy":8},{"name":"证书","categroy":1},{"name":"芝麻","categroy":4},{"name":"树枝","categroy":8},{"name":"蜘蛛","categroy":4},{"name":"树脂","categroy":2},{"name":"油脂","categroy":8},{"name":"饭汁","categroy":4},{"name":"蟹汁","categroy":4},{"name":"织物","categroy":8},{"name":"直尺","categroy":8},{"name":"废直式日光灯管","categroy":2},{"name":"绿植","categroy":4},{"name":"植物","categroy":4},{"name":"废植物","categroy":4},{"name":"指甲","categroy":8},{"name":"脚指甲","categroy":8},{"name":"手指甲脚趾甲","categroy":8},{"name":"纸","categroy":1},{"name":"瓷制品","categroy":8},{"name":"铝制品","categroy":1},{"name":"木制品","categroy":1},{"name":"木质菜板","categroy":1},{"name":"三明治包装","categroy":8},{"name":"中药","categroy":4},{"name":"中草药","categroy":4},{"name":"钟","categroy":8},{"name":"粥","categroy":4},{"name":"圆珠笔","categroy":8},{"name":"猪","categroy":4},{"name":"毛竹","categroy":8},{"name":"蜡烛","categroy":1},{"name":"生日蜡烛","categroy":8},{"name":"白煮蛋壳","categroy":4},{"name":"水煮肉片","categroy":4},{"name":"煮花生壳","categroy":4},{"name":"主板","categroy":1},{"name":"主机板","categroy":1},{"name":"电路主板","categroy":1},{"name":"鸡爪","categroy":4},{"name":"猪爪骨头","categroy":4},{"name":"西装","categroy":1},{"name":"彩妆","categroy":8},{"name":"化妆棉","categroy":8},{"name":"防撞塑料","categroy":8},{"name":"塑胶制资料夹","categroy":1},{"name":"紫菜","categroy":4},{"name":"紫砂茶具","categroy":8},{"name":"紫砂碎片","categroy":8},{"name":"牛仔裤","categroy":1},{"name":"葡萄籽","categroy":4},{"name":"西瓜籽","categroy":4},{"name":"被子","categroy":1},{"name":"自动铅","categroy":8},{"name":"自暖包","categroy":8},{"name":"油渍的报纸","categroy":8},{"name":"有污渍的餐盒","categroy":8},{"name":"签字笔","categroy":8},{"name":"棕叶","categroy":8},{"name":"棕子皮","categroy":8},{"name":"棕子叶","categroy":8},{"name":"走油肉","categroy":4},{"name":"足球","categroy":1},{"name":"电钻","categroy":1},{"name":"钻笔","categroy":8},{"name":"钻石","categroy":1},{"name":"香烟过滤嘴","categroy":8},{"name":"作文书","categroy":1},{"name":"竹坐垫","categroy":8},{"name":"led灯","categroy":2},{"name":"PET瓶","categroy":1},{"name":"LED灯泡","categroy":2},{"name":"kt板","categroy":1},{"name":"cpu","categroy":1},{"name":"ipad","categroy":1},{"name":"kindle","categroy":1},{"name":"PIZZA盒","categroy":8},{"name":"xbox","categroy":1},{"name":"iphone x","categroy":1},{"name":"IPHONE手机","categroy":1},{"name":"pp管","categroy":1},{"name":"A4纸","categroy":1},{"name":"cd","categroy":1},{"name":"CD机","categroy":1},{"name":"KINDLE壳","categroy":8},{"name":"zippo打火机","categroy":8},{"name":"x光片","categroy":2},{"name":"x光胶片","categroy":2},{"name":"PVC瓶","categroy":1},{"name":"剩菜剩饭","categroy":4},{"name":"食物残渣","categroy":4},{"name":"肉类","categroy":4},{"name":"鱼虾","categroy":4},{"name":"蛋壳","categroy":4},{"name":"鱼骨头","categroy":4},{"name":"肉骨头","categroy":4},{"name":"果皮","categroy":4},{"name":"树叶","categroy":4},{"name":"瓜子壳","categroy":4},{"name":"花生壳","categroy":4},{"name":"藜麦","categroy":4},{"name":"鸡骨头","categroy":4},{"name":"鸭骨头","categroy":4},{"name":"鹅骨头","categroy":4},{"name":"草莓叶","categroy":4},{"name":"米饭","categroy":4},{"name":"豌豆皮","categroy":4},{"name":"韩国泡菜","categroy":4},{"name":"普洱茶","categroy":4},{"name":"残枝落叶","categroy":4},{"name":"植物枝干","categroy":4},{"name":"杂菜","categroy":4},{"name":"动物尸体","categroy":4},{"name":"牲畜粪便","categroy":4},{"name":"橘子皮","categroy":4},{"name":"香蕉皮","categroy":4},{"name":"苹果皮","categroy":4},{"name":"西瓜皮","categroy":4},{"name":"芒果皮","categroy":4},{"name":"山竹壳","categroy":4},{"name":"洋葱皮","categroy":4},{"name":"中药渣","categroy":4},{"name":"宠物饲料","categroy":4},{"name":"矿物猫砂","categroy":4},{"name":"食用油","categroy":4},{"name":"动物粪便","categroy":4},{"name":"牛排","categroy":4},{"name":"喜糖","categroy":4},{"name":"咖啡残渣","categroy":4},{"name":"大白菜","categroy":4},{"name":"粽子馅","categroy":4},{"name":"宠物粪便","categroy":4},{"name":"猫屎","categroy":4},{"name":"咖啡渣","categroy":4},{"name":"鲜花瓣","categroy":4},{"name":"豆腐猫砂","categroy":4},{"name":"冬枣","categroy":4},{"name":"大蒜叶","categroy":4},{"name":"杏核","categroy":4},{"name":"纸质吸管","categroy":4},{"name":"茶叶渣","categroy":4},{"name":"小龙虾壳","categroy":4},{"name":"榴莲酥","categroy":4},{"name":"榴莲肉","categroy":4},{"name":"枇杷核","categroy":4},{"name":"百香果壳","categroy":4},{"name":"食品添加剂","categroy":4},{"name":"豆制品","categroy":4},{"name":"动物内脏","categroy":4},{"name":"脆枣","categroy":4},{"name":"废弃食用油","categroy":4},{"name":"废弃调味品","categroy":4},{"name":"糖果","categroy":4},{"name":"水蜜桃肉","categroy":4},{"name":"火龙果","categroy":4},{"name":"火锅底料","categroy":4},{"name":"螺蛳肉","categroy":4},{"name":"排骨","categroy":4},{"name":"蒜皮","categroy":4},{"name":"叉烧酥","categroy":4},{"name":"菠萝皮","categroy":4},{"name":"南瓜籽","categroy":4},{"name":"香瓜子","categroy":4},{"name":"青椒","categroy":4},{"name":"蒜头","categroy":4},{"name":"毛豆壳","categroy":4},{"name":"鸡肉","categroy":4},{"name":"鸭掌","categroy":4},{"name":"鱼肉","categroy":4},{"name":"荔枝皮","categroy":4},{"name":"方便面面条","categroy":4},{"name":"螺蛳壳","categroy":4},{"name":"牛油果核","categroy":4},{"name":"老鼠","categroy":4},{"name":"包裹着猫屎的豆腐猫砂","categroy":4},{"name":"茭白","categroy":4},{"name":"茭白叶","categroy":4},{"name":"葡萄干","categroy":4},{"name":"火龙果皮","categroy":4},{"name":"椰肉","categroy":4},{"name":"苹果肉","categroy":4},{"name":"香瓜皮","categroy":4},{"name":"扁豆","categroy":4},{"name":"玉米须","categroy":4},{"name":"兔子粪便","categroy":4},{"name":"螃蟹壳","categroy":4},{"name":"吸管纸质包装","categroy":4},{"name":"西餐糕点","categroy":4},{"name":"鸡脚爪","categroy":4},{"name":"鸭爪","categroy":4},{"name":"山楂","categroy":4},{"name":"鸭翅","categroy":4},{"name":"扇贝肉","categroy":4},{"name":"火锅渣","categroy":4},{"name":"布丁","categroy":4},{"name":"奶茶中的珍珠","categroy":4},{"name":"燕麦","categroy":4},{"name":"薯格","categroy":4},{"name":"甜品","categroy":4},{"name":"水果","categroy":4},{"name":"枯树叶","categroy":4},{"name":"蔬菜残余","categroy":4},{"name":"西兰花梗","categroy":4},{"name":"桃子","categroy":4},{"name":"压缩饼干","categroy":4},{"name":"花生衣","categroy":4},{"name":"结团猫砂","categroy":4},{"name":"红豆","categroy":4},{"name":"熟鸡蛋壳","categroy":4},{"name":"蟑螂","categroy":4},{"name":"西瓜子","categroy":4},{"name":"鸡屎","categroy":4},{"name":"盒饭","categroy":4},{"name":"奶油","categroy":4},{"name":"豆芽","categroy":4},{"name":"杏仁饼","categroy":4},{"name":"猫屎咖啡","categroy":4},{"name":"水果干","categroy":4},{"name":"鸭腿","categroy":4},{"name":"车厘子核","categroy":4},{"name":"平菇","categroy":4},{"name":"金针菇","categroy":4},{"name":"茨菇","categroy":4},{"name":"藕片","categroy":4},{"name":"葡萄梗","categroy":4},{"name":"咖啡豆","categroy":4},{"name":"丝瓜皮","categroy":4},{"name":"烂水果","categroy":4},{"name":"鸡皮","categroy":4},{"name":"海瓜子壳","categroy":4},{"name":"桂皮","categroy":4},{"name":"鸡蛋仔","categroy":4},{"name":"螺蛳","categroy":4},{"name":"猪蹄骨","categroy":4},{"name":"过期大米","categroy":4},{"name":"过期糖","categroy":4},{"name":"过期巧克力","categroy":4},{"name":"巧克力酱","categroy":4},{"name":"李子","categroy":4},{"name":"鸟粪","categroy":4},{"name":"栗子壳","categroy":4},{"name":"核桃肉","categroy":4},{"name":"李子核","categroy":4},{"name":"薯条","categroy":4},{"name":"柠檬皮","categroy":4},{"name":"柚子皮","categroy":4},{"name":"蛋白","categroy":4},{"name":"干果仁","categroy":4},{"name":"橄榄核","categroy":4},{"name":"姜糖","categroy":4},{"name":"瓜子皮","categroy":4},{"name":"玉米棒","categroy":4},{"name":"过期食品","categroy":4},{"name":"虾头","categroy":4},{"name":"牛蛙骨","categroy":4},{"name":"杨梅核","categroy":4},{"name":"过期调味料","categroy":4},{"name":"孜然粉","categroy":4},{"name":"蜂蜜","categroy":4},{"name":"红豆糕","categroy":4},{"name":"叉烧","categroy":4},{"name":"菠萝包","categroy":4},{"name":"干面条","categroy":4},{"name":"干脆面","categroy":4},{"name":"出前一丁面条","categroy":4},{"name":"多宝鱼骨头","categroy":4},{"name":"草本植物","categroy":4},{"name":"小核桃肉","categroy":4},{"name":"凋谢的鲜花","categroy":4},{"name":"咖啡豆渣","categroy":4},{"name":"蚌肉","categroy":4},{"name":"盐水花生","categroy":4},{"name":"盐水花生壳","categroy":4},{"name":"豆浆渣","categroy":4},{"name":"红枣核","categroy":4},{"name":"枣子核","categroy":4},{"name":"面粉","categroy":4},{"name":"咖啡粉","categroy":4},{"name":"桔子皮","categroy":4},{"name":"橘子","categroy":4},{"name":"牛油果皮","categroy":4},{"name":"油桃肉","categroy":4},{"name":"水蜜桃","categroy":4},{"name":"樱桃干","categroy":4},{"name":"龙虾片","categroy":4},{"name":"土豆泥","categroy":4},{"name":"废弃植物","categroy":4},{"name":"玉米猫砂","categroy":4},{"name":"油烟机油脂","categroy":4},{"name":"油条","categroy":4},{"name":"紫薯皮","categroy":4},{"name":"燕麦片","categroy":4},{"name":"小米","categroy":4},{"name":"糯米","categroy":4},{"name":"白糖","categroy":4},{"name":"榨菜","categroy":4},{"name":"油桃核","categroy":4},{"name":"酸豆角","categroy":4},{"name":"牛肉","categroy":4},{"name":"鸭肉","categroy":4},{"name":"话梅肉","categroy":4},{"name":"鱼皮花生","categroy":4},{"name":"咸蛋黄","categroy":4},{"name":"冬瓜皮","categroy":4},{"name":"咖啡伴侣粉","categroy":4},{"name":"苦瓜","categroy":4},{"name":"小龙虾头","categroy":4},{"name":"石榴","categroy":4},{"name":"石榴籽","categroy":4},{"name":"叫化鸡","categroy":4},{"name":"干辣椒","categroy":4},{"name":"山药","categroy":4},{"name":"土豆皮","categroy":4},{"name":"炒花生米","categroy":4},{"name":"蟹肉","categroy":4},{"name":"虾肉","categroy":4},{"name":"速冻馄饨","categroy":4},{"name":"棒棒糖","categroy":4},{"name":"蛤肉","categroy":4},{"name":"小龙虾肉","categroy":4},{"name":"蚕豆","categroy":4},{"name":"樱桃梗","categroy":4},{"name":"水果皮","categroy":4},{"name":"皮蛋","categroy":4},{"name":"咸蛋","categroy":4},{"name":"奇异果","categroy":4},{"name":"花甲壳","categroy":4},{"name":"海底捞锅底","categroy":4},{"name":"牛肉干","categroy":4},{"name":"椰果","categroy":4},{"name":"鸭下巴","categroy":4},{"name":"芝麻酱","categroy":4},{"name":"花生酱","categroy":4},{"name":"小龙虾黄","categroy":4},{"name":"肯德基炸鸡","categroy":4},{"name":"麦当劳炸鸡","categroy":4},{"name":"面饼","categroy":4},{"name":"鸡蛋饼","categroy":4},{"name":"煎饼","categroy":4},{"name":"哈密瓜","categroy":4},{"name":"哈密瓜籽","categroy":4},{"name":"干树叶","categroy":4},{"name":"绿豆糕","categroy":4},{"name":"乒乓糯米糍","categroy":4},{"name":"杏仁核","categroy":4},{"name":"黄杏核","categroy":4},{"name":"茶叶","categroy":4},{"name":"铁观音","categroy":4},{"name":"乌龙茶","categroy":4},{"name":"白茶","categroy":4},{"name":"桔普茶","categroy":4},{"name":"水草","categroy":4},{"name":"海藻","categroy":4},{"name":"水果软核","categroy":4},{"name":"咖喱粉","categroy":4},{"name":"瓜子","categroy":4},{"name":"大蒜皮","categroy":4},{"name":"扇贝壳","categroy":4},{"name":"咸蛋壳","categroy":4},{"name":"鸭蛋壳","categroy":4},{"name":"凤梨皮","categroy":4},{"name":"面包屑","categroy":4},{"name":"小龙虾","categroy":4},{"name":"香榧子壳","categroy":4},{"name":"鸡蛋皮","categroy":4},{"name":"凤梨酥","categroy":4},{"name":"苹果派","categroy":4},{"name":"玉米芯","categroy":4},{"name":"黄瓜皮","categroy":4},{"name":"橙子皮","categroy":4},{"name":"生鸡蛋壳","categroy":4},{"name":"花茶渣","categroy":4},{"name":"荷叶","categroy":4},{"name":"柚子核","categroy":4},{"name":"青蟹壳","categroy":4},{"name":"山楂片","categroy":4},{"name":"红辣椒","categroy":4},{"name":"巧克力粉","categroy":4},{"name":"鸭架","categroy":4},{"name":"白砂糖","categroy":4},{"name":"鸽粪","categroy":4},{"name":"桃子皮","categroy":4},{"name":"桂圆干","categroy":4},{"name":"中草药材","categroy":4},{"name":"梭子蟹壳","categroy":4},{"name":"河虾","categroy":4},{"name":"白米虾","categroy":4},{"name":"象鼻蚌","categroy":4},{"name":"水蜜桃核","categroy":4},{"name":"糯米纸","categroy":4},{"name":"鸡蛋卷","categroy":4},{"name":"鸡蛋壳","categroy":4},{"name":"豆干","categroy":4},{"name":"豆腐干","categroy":4},{"name":"冬瓜籽","categroy":4},{"name":"向日葵花束","categroy":4},{"name":"枯萎花束","categroy":4},{"name":"笋干","categroy":4},{"name":"白煮蛋","categroy":4},{"name":"花蛤肉","categroy":4},{"name":"蛋黄酥","categroy":4},{"name":"油墩子","categroy":4},{"name":"葱油饼","categroy":4},{"name":"山东煎饼","categroy":4},{"name":"碎骨头","categroy":4},{"name":"枸杞","categroy":4},{"name":"猪肝","categroy":4},{"name":"碧根果肉","categroy":4},{"name":"茭白皮","categroy":4},{"name":"西葫芦","categroy":4},{"name":"猪肉","categroy":4},{"name":"小排骨","categroy":4},{"name":"沙拉酱","categroy":4},{"name":"拉菲草","categroy":4},{"name":"大白兔奶糖","categroy":4},{"name":"猕猴桃皮","categroy":4},{"name":"桃仁","categroy":4},{"name":"杨梅干","categroy":4},{"name":"带子壳","categroy":4},{"name":"玉米塑料袋","categroy":4},{"name":"鸭头","categroy":4},{"name":"翅尖","categroy":4},{"name":"番茄沙司","categroy":4},{"name":"巴旦木","categroy":4},{"name":"叶子","categroy":4},{"name":"鸭舌","categroy":4},{"name":"黄芪","categroy":4},{"name":"三七粉","categroy":4},{"name":"章鱼小丸子","categroy":4},{"name":"鱿鱼","categroy":4},{"name":"鱿鱼丝","categroy":4},{"name":"生蚝肉","categroy":4},{"name":"枇杷","categroy":4},{"name":"烤鸭","categroy":4},{"name":"北京烤鸭","categroy":4},{"name":"洋山芋","categroy":4},{"name":"铁棍山药","categroy":4},{"name":"鸭锁骨","categroy":4},{"name":"海星","categroy":4},{"name":"黑椒牛排","categroy":4},{"name":"杨桃","categroy":4},{"name":"胡萝卜皮","categroy":4},{"name":"生肉","categroy":4},{"name":"皮蛋壳","categroy":4},{"name":"山楂干","categroy":4},{"name":"番茄皮","categroy":4},{"name":"番茄梗","categroy":4},{"name":"鲜花饼","categroy":4},{"name":"公丁香","categroy":4},{"name":"薄荷叶","categroy":4},{"name":"花甲粉","categroy":4},{"name":"金丝皇菊","categroy":4},{"name":"火腿肠","categroy":4},{"name":"藏红花","categroy":4},{"name":"基围虾","categroy":4},{"name":"基围虾壳","categroy":4},{"name":"烘山芋皮","categroy":4},{"name":"茶叶蛋壳","categroy":4},{"name":"咸鸡","categroy":4},{"name":"烤鸡","categroy":4},{"name":"盐水鸭","categroy":4},{"name":"银耳","categroy":4},{"name":"意大利面","categroy":4},{"name":"烧饼","categroy":4},{"name":"红薯皮","categroy":4},{"name":"雪花酥","categroy":4},{"name":"干桂圆壳","categroy":4},{"name":"丝瓜","categroy":4},{"name":"玉米粒","categroy":4},{"name":"胖大海","categroy":4},{"name":"干面粉","categroy":4},{"name":"薰衣草","categroy":4},{"name":"干花生壳","categroy":4},{"name":"猫冻干","categroy":4},{"name":"麻辣香锅残渣","categroy":4},{"name":"菠萝蜜肉","categroy":4},{"name":"五香蛋","categroy":4},{"name":"莴苣","categroy":4},{"name":"蒲公英","categroy":4},{"name":"小笼包","categroy":4},{"name":"灌汤包","categroy":4},{"name":"德克士炸鸡","categroy":4},{"name":"鲫鱼","categroy":4},{"name":"鳜鱼","categroy":4},{"name":"粉丝","categroy":4},{"name":"木耳","categroy":4},{"name":"花草茶渣","categroy":4},{"name":"肉夹馍","categroy":4},{"name":"粗盐","categroy":4},{"name":"豆杆","categroy":4},{"name":"青豆","categroy":4},{"name":"青豆萁","categroy":4},{"name":"饺子皮","categroy":4},{"name":"馄饨皮","categroy":4},{"name":"白瓜子","categroy":4},{"name":"煎饼果子","categroy":4},{"name":"小葱","categroy":4},{"name":"木瓜","categroy":4},{"name":"木瓜籽","categroy":4},{"name":"可降解吸管","categroy":4},{"name":"小肉骨头","categroy":4},{"name":"螺蛳粉","categroy":4},{"name":"芋艿皮","categroy":4},{"name":"花椒粉","categroy":4},{"name":"绿豆沙","categroy":4},{"name":"荞麦","categroy":4},{"name":"荞麦面","categroy":4},{"name":"阿胶","categroy":4},{"name":"宽粉条","categroy":4},{"name":"毛豆皮","categroy":4},{"name":"麦片","categroy":4},{"name":"纸吸管","categroy":4},{"name":"调制海藻面膜","categroy":4},{"name":"桂花糕","categroy":4},{"name":"猪皮","categroy":4},{"name":"臭虫","categroy":4},{"name":"芡实糕","categroy":4},{"name":"牛轧糖","categroy":4},{"name":"火鸡骨头","categroy":4},{"name":"鸡头","categroy":4},{"name":"猪排","categroy":4},{"name":"猪扒","categroy":4},{"name":"蜗牛","categroy":4},{"name":"鱼饲料","categroy":4},{"name":"银杏果","categroy":4},{"name":"麻花","categroy":4},{"name":"鱼头","categroy":4},{"name":"早餐谷物","categroy":4},{"name":"猪小排","categroy":4},{"name":"猪肉排骨","categroy":4},{"name":"玉米纤维袋","categroy":4},{"name":"话梅壳","categroy":4},{"name":"乌梅壳","categroy":4},{"name":"山竹核","categroy":4},{"name":"鸡软骨","categroy":4},{"name":"杏子核","categroy":4},{"name":"虾皮","categroy":4},{"name":"虾米","categroy":4},{"name":"蟠桃核","categroy":4},{"name":"手擀面","categroy":4},{"name":"甲鱼小骨","categroy":4},{"name":"猪肋排","categroy":4},{"name":"里脊肉","categroy":4},{"name":"木薯淀粉","categroy":4},{"name":"香蕉干","categroy":4},{"name":"鸭皮","categroy":4},{"name":"纸巾","categroy":8},{"name":"牙签","categroy":8},{"name":"一次性筷子","categroy":8},{"name":"陶瓷类废弃物","categroy":8},{"name":"清扫渣土","categroy":8},{"name":"陶瓷碗碟","categroy":8},{"name":"大块骨头","categroy":8},{"name":"植物硬壳","categroy":8},{"name":"枯萎花草","categroy":8},{"name":"塑料袋","categroy":8},{"name":"保鲜膜","categroy":8},{"name":"A4纸包装袋","categroy":8},{"name":"零食包装袋","categroy":8},{"name":"快递包装袋","categroy":8},{"name":"热饮杯盖","categroy":8},{"name":"咖啡杯杯盖","categroy":8},{"name":"干电池（无汞）","categroy":8},{"name":"纸尿裤","categroy":8},{"name":"卫生纸","categroy":8},{"name":"卫生巾外层薄塑纸","categroy":8},{"name":"湿纸巾","categroy":8},{"name":"旧浴缸","categroy":8},{"name":"盆子","categroy":8},{"name":"坏马桶","categroy":8},{"name":"旧水槽","categroy":8},{"name":"坛子","categroy":8},{"name":"菜板","categroy":8},{"name":"砖块","categroy":8},{"name":"杯子","categroy":8},{"name":"瓦片","categroy":8},{"name":"西梅核","categroy":8},{"name":"坏的花盆","categroy":8},{"name":"木质梳子","categroy":8},{"name":"脏污衣服","categroy":8},{"name":"湿垃圾袋","categroy":8},{"name":"水彩笔","categroy":8},{"name":"过期化妆品","categroy":8},{"name":"旧镜子","categroy":8},{"name":"猫罐头","categroy":8},{"name":"牙膏壳","categroy":8},{"name":"椰子壳","categroy":8},{"name":"塑料垃圾袋","categroy":8},{"name":"污染纸张","categroy":8},{"name":"废弃食品袋","categroy":8},{"name":"一次性餐盒","categroy":8},{"name":"旧毛巾","categroy":8},{"name":"牙膏皮","categroy":8},{"name":"废弃的纸张","categroy":8},{"name":"装修废弃物","categroy":8},{"name":"盛放厨余果皮的垃圾袋","categroy":8},{"name":"灰土","categroy":8},{"name":"污染较严重的纸","categroy":8},{"name":"核桃壳","categroy":8},{"name":"头发","categroy":8},{"name":"胶带","categroy":8},{"name":"一次性咖啡纸杯","categroy":8},{"name":"奶茶纸杯","categroy":8},{"name":"护理垫","categroy":8},{"name":"包裹着狗屎的纸巾","categroy":8},{"name":"包裹着狗屎的报纸","categroy":8},{"name":"雪糕袋","categroy":8},{"name":"棉花棒","categroy":8},{"name":"橡皮泥","categroy":8},{"name":"粽叶","categroy":8},{"name":"猫毛","categroy":8},{"name":"小票","categroy":8},{"name":"蚊香片","categroy":8},{"name":"暖宝宝","categroy":8},{"name":"干冰","categroy":8},{"name":"铅笔屑","categroy":8},{"name":"被污染的垃圾袋","categroy":8},{"name":"田螺壳","categroy":8},{"name":"蛏子壳","categroy":8},{"name":"文蛤壳","categroy":8},{"name":"水彩颜料","categroy":8},{"name":"一次性口罩","categroy":8},{"name":"口香糖","categroy":8},{"name":"一次性塑料袋","categroy":8},{"name":"污渍纸巾","categroy":8},{"name":"木瓶塞","categroy":8},{"name":"指甲片","categroy":8},{"name":"大米袋","categroy":8},{"name":"烟盒","categroy":8},{"name":"烧烤木签","categroy":8},{"name":"棉花球","categroy":8},{"name":"泡沫盒子","categroy":8},{"name":"大龙虾壳","categroy":8},{"name":"中药袋","categroy":8},{"name":"胶带纸","categroy":8},{"name":"薯片罐","categroy":8},{"name":"牙线","categroy":8},{"name":"塑料吸管","categroy":8},{"name":"一次性保鲜膜","categroy":8},{"name":"湿巾纸","categroy":8},{"name":"瓷器碎片","categroy":8},{"name":"砖瓦陶瓷","categroy":8},{"name":"雪糕包装袋","categroy":8},{"name":"泡面桶","categroy":8},{"name":"酒精棉花","categroy":8},{"name":"玉米皮","categroy":8},{"name":"奶茶塑料杯","categroy":8},{"name":"头屑","categroy":8},{"name":"帝王蟹壳","categroy":8},{"name":"一次性用品","categroy":8},{"name":"渣土","categroy":8},{"name":"陶瓷制品","categroy":8},{"name":"烘培纸","categroy":8},{"name":"除湿袋","categroy":8},{"name":"滤纸","categroy":8},{"name":"生蚝壳","categroy":8},{"name":"猪大骨","categroy":8},{"name":"一次性塑料餐盒","categroy":8},{"name":"调料袋","categroy":8},{"name":"发热包","categroy":8},{"name":"洗衣液包装袋","categroy":8},{"name":"咖啡滤纸","categroy":8},{"name":"包裹着狗屎的塑料袋","categroy":8},{"name":"塑料盖子","categroy":8},{"name":"头饰","categroy":8},{"name":"胶囊咖啡","categroy":8},{"name":"椰青壳","categroy":8},{"name":"吸油纸","categroy":8},{"name":"厨房用纸","categroy":8},{"name":"琴弦","categroy":8},{"name":"呕吐物纸巾","categroy":8},{"name":"纸质包装袋","categroy":8},{"name":"方便面桶","categroy":8},{"name":"面膜包装袋","categroy":8},{"name":"塑料拖鞋","categroy":8},{"name":"橡皮筋","categroy":8},{"name":"水笔笔芯","categroy":8},{"name":"湿灰尘","categroy":8},{"name":"蛤蜊壳","categroy":8},{"name":"纽扣（少量）","categroy":8},{"name":"一次性塑料手套","categroy":8},{"name":"中性笔","categroy":8},{"name":"KFC食物包装","categroy":8},{"name":"蚊香灰","categroy":8},{"name":"乳胶","categroy":8},{"name":"玻璃胶","categroy":8},{"name":"带有婴儿粪便的尿不湿","categroy":8},{"name":"暖宝宝贴","categroy":8},{"name":"牛奶袋","categroy":8},{"name":"血糖试纸","categroy":8},{"name":"餐饮外卖盒","categroy":8},{"name":"油画颜料","categroy":8},{"name":"油画颜料软管","categroy":8},{"name":"吸管塑料包装","categroy":8},{"name":"橡胶制品","categroy":8},{"name":"橡胶手套","categroy":8},{"name":"过期口红","categroy":8},{"name":"黄油包装纸","categroy":8},{"name":"脏纸尿裤","categroy":8},{"name":"蛋糕盒","categroy":8},{"name":"干净无油食品包装袋","categroy":8},{"name":"面包袋","categroy":8},{"name":"蛋糕袋","categroy":8},{"name":"快递单","categroy":8},{"name":"营养土","categroy":8},{"name":"一次性塑料盘","categroy":8},{"name":"冰宝贴","categroy":8},{"name":"一次性塑料调羹","categroy":8},{"name":"手指甲","categroy":8},{"name":"小纸屑","categroy":8},{"name":"眼镜架","categroy":8},{"name":"陶土花瓶","categroy":8},{"name":"牛肋骨","categroy":8},{"name":"被油污污染过的报纸","categroy":8},{"name":"脏纸巾","categroy":8},{"name":"衣服标签","categroy":8},{"name":"小核桃壳","categroy":8},{"name":"电蚊香片","categroy":8},{"name":"瓷碎片","categroy":8},{"name":"卫生棉条","categroy":8},{"name":"一次性塑料浴帽","categroy":8},{"name":"一次性纸餐盘","categroy":8},{"name":"纸巾包装袋","categroy":8},{"name":"抽纸塑料袋","categroy":8},{"name":"毛笔写过的纸","categroy":8},{"name":"塑料表带","categroy":8},{"name":"粉饼盒","categroy":8},{"name":"502胶水","categroy":8},{"name":"硅胶猫砂","categroy":8},{"name":"水晶猫砂","categroy":8},{"name":"冰淇淋包装袋","categroy":8},{"name":"护手霜","categroy":8},{"name":"粉尘","categroy":8},{"name":"一次性餐具","categroy":8},{"name":"卸妆纸巾","categroy":8},{"name":"洗衣粉","categroy":8},{"name":"气泡膜","categroy":8},{"name":"智齿","categroy":8},{"name":"钢丝球","categroy":8},{"name":"一次性纸杯","categroy":8},{"name":"大头针","categroy":8},{"name":"永生花","categroy":8},{"name":"带有婴儿粪便的纸尿裤","categroy":8},{"name":"塑封袋","categroy":8},{"name":"圆珠笔芯","categroy":8},{"name":"面膜外层纸","categroy":8},{"name":"袋泡茶","categroy":8},{"name":"塑料花","categroy":8},{"name":"冰箱贴","categroy":8},{"name":"假睫毛胶水","categroy":8},{"name":"洗碗布","categroy":8},{"name":"电话卡","categroy":8},{"name":"手机壳","categroy":8},{"name":"面巾纸","categroy":8},{"name":"泥土","categroy":8},{"name":"网球","categroy":8},{"name":"烟灰","categroy":8},{"name":"毛衣针","categroy":8},{"name":"护发精油","categroy":8},{"name":"紫砂壶","categroy":8},{"name":"防晒喷雾","categroy":8},{"name":"棉花","categroy":8},{"name":"寄居蟹","categroy":8},{"name":"水饺包装袋","categroy":8},{"name":"巧克力包装袋","categroy":8},{"name":"饼干包装袋","categroy":8},{"name":"奶嘴","categroy":8},{"name":"糖纸","categroy":8},{"name":"胡须","categroy":8},{"name":"包裹着痰的纸巾","categroy":8},{"name":"包裹着鼻涕的纸巾","categroy":8},{"name":"KFC纸盒","categroy":8},{"name":"麦当劳纸盒","categroy":8},{"name":"牛骨","categroy":8},{"name":"啤酒瓶盖","categroy":8},{"name":"糖果皮","categroy":8},{"name":"包裹着西瓜籽的纸巾","categroy":8},{"name":"包裹着鼻屎的纸巾","categroy":8},{"name":"冷饮包装","categroy":8},{"name":"外卖塑料袋","categroy":8},{"name":"外卖塑料盒","categroy":8},{"name":"外卖纸盒","categroy":8},{"name":"5号电池（无汞）","categroy":8},{"name":"7号电池（无汞）","categroy":8},{"name":"湿头发","categroy":8},{"name":"毛发","categroy":8},{"name":"一次性手套","categroy":8},{"name":"卸妆膏","categroy":8},{"name":"手机膜","categroy":8},{"name":"防霉防蛀片","categroy":8},{"name":"卫生护垫","categroy":8},{"name":"摩丝罐","categroy":8},{"name":"厨房手套","categroy":8},{"name":"沐浴球","categroy":8},{"name":"耳塞","categroy":8},{"name":"牙线棒","categroy":8},{"name":"修正液","categroy":8},{"name":"废纸","categroy":8},{"name":"卫生间用纸","categroy":8},{"name":"陶瓷花瓶","categroy":8},{"name":"陶瓷花盆","categroy":8},{"name":"防碎气泡膜","categroy":8},{"name":"污损塑料袋","categroy":8},{"name":"水晶泥","categroy":8},{"name":"胶纸","categroy":8},{"name":"剃须泡沫罐","categroy":8},{"name":"风油精","categroy":8},{"name":"奶茶塑料盖","categroy":8},{"name":"打火机","categroy":8},{"name":"擦碗布","categroy":8},{"name":"碱性电池","categroy":8},{"name":"烧烤锡纸","categroy":8},{"name":"外卖饭盒","categroy":8},{"name":"装过湿垃圾的塑料袋","categroy":8},{"name":"纸质外卖盒","categroy":8},{"name":"塑料外卖盒","categroy":8},{"name":"马桶刷","categroy":8},{"name":"狗尿垫","categroy":8},{"name":"太空沙","categroy":8},{"name":"带胶制品","categroy":8},{"name":"竹制品","categroy":8},{"name":"成分复杂的制品","categroy":8},{"name":"皮皮虾壳","categroy":8},{"name":"使用过的安全套","categroy":8},{"name":"青口贝","categroy":8},{"name":"碎纸屑","categroy":8},{"name":"洗头膏","categroy":8},{"name":"番茄酱包装袋","categroy":8},{"name":"面纸","categroy":8},{"name":"身体乳","categroy":8},{"name":"青草膏","categroy":8},{"name":"洁面摩丝","categroy":8},{"name":"一次性塑料勺子","categroy":8},{"name":"眼线笔","categroy":8},{"name":"眉粉","categroy":8},{"name":"沾有油渍的食品包装袋","categroy":8},{"name":"薯片包装袋","categroy":8},{"name":"自动铅笔笔芯","categroy":8},{"name":"香薰球","categroy":8},{"name":"隐形眼镜护理液","categroy":8},{"name":"脏卫生巾","categroy":8},{"name":"湿塑料袋","categroy":8},{"name":"牛骨棒","categroy":8},{"name":"草纸","categroy":8},{"name":"雨衣","categroy":8},{"name":"湿纸巾包装","categroy":8},{"name":"纸饭盒","categroy":8},{"name":"成人用品","categroy":8},{"name":"河蚌壳","categroy":8},{"name":"香肠壳","categroy":8},{"name":"发夹","categroy":8},{"name":"发带","categroy":8},{"name":"驱蚊香片","categroy":8},{"name":"薯片盒","categroy":8},{"name":"吸尘器灰尘","categroy":8},{"name":"粉扑","categroy":8},{"name":"咖啡胶囊","categroy":8},{"name":"鸡毛","categroy":8},{"name":"安全套包装袋","categroy":8},{"name":"尿片","categroy":8},{"name":"冰棒棍","categroy":8},{"name":"广告颜料","categroy":8},{"name":"陶泥","categroy":8},{"name":"猪骨头","categroy":8},{"name":"使用过的面膜","categroy":8},{"name":"使用过的卫生巾","categroy":8},{"name":"喝过的奶茶杯子","categroy":8},{"name":"高密度碎纸机处理的碎纸","categroy":8},{"name":"泡面袋","categroy":8},{"name":"太阳眼镜","categroy":8},{"name":"美妆蛋","categroy":8},{"name":"胭脂","categroy":8},{"name":"油条包装袋","categroy":8},{"name":"奶茶杯","categroy":8},{"name":"购物卡","categroy":1},{"name":"订书机钉","categroy":8},{"name":"彩泥","categroy":8},{"name":"冰贴","categroy":8},{"name":"棒冰棍","categroy":8},{"name":"香烟头","categroy":8},{"name":"泡沫饭盒","categroy":8},{"name":"PH试纸","categroy":8},{"name":"葡萄酒木塞","categroy":8},{"name":"包裹着口香糖的纸巾","categroy":8},{"name":"火腿肠包装纸","categroy":8},{"name":"艾灸条","categroy":8},{"name":"保冷剂","categroy":8},{"name":"草木灰","categroy":8},{"name":"驱蚊手环","categroy":8},{"name":"挂耳咖啡","categroy":8},{"name":"滤挂咖啡","categroy":8},{"name":"柳絮","categroy":8},{"name":"洗涤液包装袋","categroy":8},{"name":"石锅","categroy":8},{"name":"灭蚊灯","categroy":8},{"name":"红酒塞","categroy":8},{"name":"枕巾","categroy":8},{"name":"1号电池（无汞）","categroy":8},{"name":"电子烟烟弹","categroy":8},{"name":"陶瓷盘子","categroy":8},{"name":"榨菜袋","categroy":8},{"name":"卷筒纸","categroy":8},{"name":"方便面调味包","categroy":8},{"name":"脱毛膏","categroy":8},{"name":"三角裤","categroy":8},{"name":"平角裤","categroy":8},{"name":"海绵粉扑","categroy":8},{"name":"一次性竹筷子","categroy":8},{"name":"碎碗","categroy":8},{"name":"白板笔","categroy":8},{"name":"海螺壳","categroy":8},{"name":"花蛤壳","categroy":8},{"name":"棉线","categroy":8},{"name":"糖包","categroy":8},{"name":"鼠标垫","categroy":8},{"name":"便条贴","categroy":8},{"name":"水果塑料盒","categroy":8},{"name":"糖浆包","categroy":8},{"name":"泳镜","categroy":8},{"name":"粘土","categroy":8},{"name":"干草","categroy":8},{"name":"酸奶勺","categroy":8},{"name":"中药包","categroy":8},{"name":"猪腿骨","categroy":8},{"name":"茶叶包","categroy":8},{"name":"豆浆杯","categroy":8},{"name":"测血糖针","categroy":8},{"name":"唇釉","categroy":8},{"name":"一次性打火机","categroy":8},{"name":"棒棒糖棒子","categroy":8},{"name":"旧内衣","categroy":8},{"name":"牛骨头","categroy":8},{"name":"冰棒皮","categroy":8},{"name":"冰棒外包装","categroy":8},{"name":"滴漏式咖啡","categroy":8},{"name":"星巴克咖啡杯","categroy":8},{"name":"星巴克塑料杯","categroy":8},{"name":"下水道杂物","categroy":8},{"name":"电蚊香液瓶","categroy":8},{"name":"膨润土猫砂","categroy":8},{"name":"油污纸","categroy":8},{"name":"稻草","categroy":8},{"name":"擦过鼻涕的纸巾","categroy":8},{"name":"粘毛滚纸","categroy":8},{"name":"酱油袋","categroy":8},{"name":"湿海绵","categroy":8},{"name":"羊大骨","categroy":8},{"name":"塑料笔杆","categroy":8},{"name":"过期护肤品","categroy":8},{"name":"发箍","categroy":8},{"name":"壁纸","categroy":8},{"name":"墙纸","categroy":8},{"name":"薯片袋","categroy":8},{"name":"脏抹布","categroy":8},{"name":"润肤乳","categroy":8},{"name":"脏玻璃瓶","categroy":8},{"name":"外卖盒子","categroy":8},{"name":"外卖餐具","categroy":8},{"name":"调料包","categroy":8},{"name":"辣条包装袋","categroy":8},{"name":"储奶袋","categroy":8},{"name":"玉米衣","categroy":8},{"name":"电动牙刷刷头","categroy":8},{"name":"过期防晒霜","categroy":8},{"name":"塑料打包盒","categroy":8},{"name":"透明打包盒","categroy":8},{"name":"食品密封袋","categroy":8},{"name":"食品保鲜袋","categroy":8},{"name":"榛子壳","categroy":8},{"name":"气垫膜","categroy":8},{"name":"碧然德过滤芯","categroy":8},{"name":"粘尘纸","categroy":8},{"name":"过滤袋","categroy":8},{"name":"炼乳壳","categroy":8},{"name":"装蔬菜的塑料袋","categroy":8},{"name":"脚趾甲","categroy":8},{"name":"油画刷","categroy":8},{"name":"墨胆","categroy":8},{"name":"脏卸妆棉","categroy":8},{"name":"痘痘贴","categroy":8},{"name":"甲鱼壳","categroy":8},{"name":"自热火锅加热包","categroy":8},{"name":"酸奶杯盖","categroy":8},{"name":"净化器滤芯","categroy":8},{"name":"纸巾袋","categroy":8},{"name":"艾灸贴","categroy":8},{"name":"便纸","categroy":8},{"name":"双眼皮贴","categroy":8},{"name":"包裹着猫屎的塑料袋","categroy":8},{"name":"蜡烛包装","categroy":8},{"name":"卫生巾外包装","categroy":8},{"name":"豆腐盒","categroy":8},{"name":"卫生巾包装袋","categroy":8},{"name":"海绵蛋","categroy":8},{"name":"方便面盒","categroy":8},{"name":"纸皮核桃","categroy":8},{"name":"卷筒纸外包装","categroy":8},{"name":"牙签塑料盒","categroy":8},{"name":"醋包","categroy":8},{"name":"醋袋","categroy":8},{"name":"食品塑料盒","categroy":8},{"name":"仓鼠垫沙","categroy":8},{"name":"干发巾","categroy":8},{"name":"喜茶杯","categroy":8},{"name":"面粉袋","categroy":8},{"name":"吸管薄膜","categroy":8},{"name":"蟑螂贴","categroy":8},{"name":"眼贴膜","categroy":8},{"name":"眼膜","categroy":8},{"name":"鼻贴","categroy":8},{"name":"去黑头鼻贴","categroy":8},{"name":"一次性尿布","categroy":8},{"name":"香烟灰","categroy":8},{"name":"湿厕纸","categroy":8},{"name":"烧烤竹签","categroy":8},{"name":"锡箔餐盒","categroy":8},{"name":"湿厕纸包装袋","categroy":8},{"name":"酸奶吸管","categroy":8},{"name":"铅笔芯","categroy":8},{"name":"地板蜡","categroy":8},{"name":"粽子包裹绳","categroy":8},{"name":"塑料咖啡杯","categroy":8},{"name":"硅藻泥","categroy":8},{"name":"眼镜盒","categroy":8},{"name":"逗猫棒","categroy":8},{"name":"宠物饲料包装袋","categroy":8},{"name":"滤尘袋","categroy":8},{"name":"纸胶带","categroy":8},{"name":"膨化食品包装袋","categroy":8},{"name":"眼部精华胶囊","categroy":8},{"name":"食品干燥剂","categroy":8},{"name":"纸咖啡杯","categroy":8},{"name":"空气清新剂罐","categroy":8},{"name":"空调滤芯","categroy":8},{"name":"珍珠奶茶杯","categroy":8},{"name":"早餐奶包装袋","categroy":8},{"name":"粉底液","categroy":8},{"name":"墙灰","categroy":8},{"name":"湿抹布","categroy":8},{"name":"一次性内裤","categroy":8},{"name":"生物冰袋","categroy":8},{"name":"桃子核","categroy":8},{"name":"陶瓷杯","categroy":8},{"name":"脏牛奶盒","categroy":8},{"name":"一次性塑料杯","categroy":8},{"name":"乐事薯片盒","categroy":8},{"name":"蛋黄酥包装盒","categroy":8},{"name":"瓷勺","categroy":8},{"name":"养乐多盖","categroy":8},{"name":"胶布","categroy":8},{"name":"一次性洗脸巾","categroy":8},{"name":"沸石猫砂","categroy":8},{"name":"早餐塑料袋","categroy":8},{"name":"豆浆杯盖","categroy":8},{"name":"口红盒","categroy":8},{"name":"包裹着猫屎的膨润土猫砂","categroy":8},{"name":"游泳眼镜","categroy":8},{"name":"老花眼镜","categroy":8},{"name":"蜡烛塑料模","categroy":8},{"name":"塑料挂钩","categroy":8},{"name":"奶粉勺子","categroy":8},{"name":"减震泡泡膜","categroy":8},{"name":"擦手纸","categroy":8},{"name":"奶粉盖","categroy":8},{"name":"水粉颜料","categroy":8},{"name":"机票","categroy":8},{"name":"演唱会票","categroy":8},{"name":"车票","categroy":8},{"name":"大头钉","categroy":8},{"name":"热敏纸","categroy":8},{"name":"不干胶纸","categroy":8},{"name":"饮料瓶标签","categroy":8},{"name":"方便面包装袋","categroy":8},{"name":"标签纸","categroy":8},{"name":"沙拉袋","categroy":8},{"name":"快递贴纸","categroy":8},{"name":"气泡垫","categroy":8},{"name":"废瓷砖","categroy":8},{"name":"水果罐","categroy":8},{"name":"保湿喷雾","categroy":8},{"name":"火车票","categroy":8},{"name":"退烧贴","categroy":8},{"name":"卸妆油瓶","categroy":8},{"name":"水果包装袋","categroy":8},{"name":"泡面调料包","categroy":8},{"name":"冻干粉面膜","categroy":8},{"name":"软膜撕拉面膜","categroy":8},{"name":"卷笔刀","categroy":8},{"name":"化妆品瓶盖","categroy":8},{"name":"N次贴","categroy":8},{"name":"纳米海绵","categroy":8},{"name":"一次性剃须刀片","categroy":8},{"name":"塑料油壶","categroy":8},{"name":"眼线液","categroy":8},{"name":"避孕套包装","categroy":8},{"name":"兔毛","categroy":8},{"name":"大龙虾头","categroy":8},{"name":"一次性塑料鞋套","categroy":8},{"name":"粽子皮","categroy":8},{"name":"牛皮筋","categroy":8},{"name":"修眉刀","categroy":8},{"name":"头绳","categroy":8},{"name":"艾灸渣","categroy":8},{"name":"牙套","categroy":8},{"name":"塑料刷子","categroy":8},{"name":"防蚊手环","categroy":8},{"name":"搓澡巾","categroy":8},{"name":"烟丝","categroy":8},{"name":"方便面叉子","categroy":8},{"name":"汉堡纸","categroy":8},{"name":"眼镜布","categroy":8},{"name":"果冻包装盒","categroy":8},{"name":"干冰袋","categroy":8},{"name":"头皮屑","categroy":8},{"name":"长寿果壳","categroy":8},{"name":"超市塑料袋","categroy":8},{"name":"防震膜","categroy":8},{"name":"羊肉骨头","categroy":8},{"name":"酱油包装袋","categroy":8},{"name":"一次性餐具包装","categroy":8},{"name":"爽身粉","categroy":8},{"name":"84消毒液瓶","categroy":8},{"name":"炸鸡包装袋","categroy":8},{"name":"气泡纸","categroy":8},{"name":"液体蚊香","categroy":8},{"name":"织带","categroy":8},{"name":"液体蚊香瓶","categroy":8},{"name":"卸妆乳瓶","categroy":8},{"name":"包裹着鸡蛋壳的餐巾纸","categroy":8},{"name":"气泡袋","categroy":8},{"name":"条码纸","categroy":8},{"name":"干草包装袋","categroy":8},{"name":"猫粮包装袋","categroy":8},{"name":"香肠竹签","categroy":8},{"name":"破碎盘子","categroy":8},{"name":"荷兰猪毛","categroy":8},{"name":"碳性电池","categroy":8},{"name":"串串竹签","categroy":8},{"name":"旧口罩","categroy":8},{"name":"扇子","categroy":8},{"name":"乳垫","categroy":8},{"name":"吸味剂","categroy":8},{"name":"烟盒内锡纸","categroy":8},{"name":"旧牙刷","categroy":8},{"name":"马克杯","categroy":8},{"name":"绿豆包装","categroy":8},{"name":"菠萝蜜核","categroy":8},{"name":"日抛","categroy":8},{"name":"牙贴","categroy":8},{"name":"一次性电子烟","categroy":8},{"name":"果冻壳","categroy":8},{"name":"湿面巾纸","categroy":8},{"name":"购物小票","categroy":8},{"name":"冰淇淋纸","categroy":8},{"name":"红茶包","categroy":8},{"name":"自热包","categroy":8},{"name":"丙烯颜料","categroy":8},{"name":"陶瓷烟灰缸","categroy":8},{"name":"丝瓜筋","categroy":8},{"name":"带油抹布","categroy":8},{"name":"塑料牙签","categroy":8},{"name":"鸽毛","categroy":8},{"name":"毛笔","categroy":8},{"name":"脱酸素剂","categroy":8},{"name":"消毒棉","categroy":8},{"name":"油性笔","categroy":8},{"name":"发卡","categroy":8},{"name":"防潮袋","categroy":8},{"name":"刘海夹","categroy":8},{"name":"饼干袋","categroy":8},{"name":"浴沙","categroy":8},{"name":"冷饮包装纸","categroy":8},{"name":"一次性拖鞋","categroy":8},{"name":"足浴袋","categroy":8},{"name":"吸湿剂","categroy":8},{"name":"洗衣粉袋","categroy":8},{"name":"化妆品密封塑料膜","categroy":8},{"name":"湿报纸","categroy":8},{"name":"婴幼儿纸尿裤","categroy":8},{"name":"眼镜框","categroy":8},{"name":"油污湿巾纸","categroy":8},{"name":"脱氧保鲜剂","categroy":8},{"name":"关东煮纸杯","categroy":8},{"name":"碘酒棉球","categroy":8},{"name":"酒精棉球","categroy":8},{"name":"珍宝蟹","categroy":8},{"name":"泡脚袋","categroy":8},{"name":"一次性便当盒","categroy":8},{"name":"羊肉串棒","categroy":8},{"name":"碳包","categroy":8},{"name":"手机链","categroy":8},{"name":"卤料包","categroy":8},{"name":"五子棋","categroy":8},{"name":"化妆镜","categroy":8},{"name":"香囊","categroy":8},{"name":"塑料带","categroy":8},{"name":"测血糖试纸","categroy":8},{"name":"足贴","categroy":8},{"name":"牛肉骨头","categroy":8},{"name":"必胜客纸盒","categroy":8},{"name":"奶茶盖","categroy":8},{"name":"隐形眼镜盒","categroy":8},{"name":"酒精棉片","categroy":8},{"name":"光碟包","categroy":8},{"name":"烤串棒","categroy":8},{"name":"棒冰包装袋","categroy":8},{"name":"湿卫生纸","categroy":8},{"name":"席子","categroy":8},{"name":"竹炭包","categroy":8},{"name":"园艺土","categroy":8},{"name":"牛排包装","categroy":8},{"name":"蔬菜包装袋","categroy":8},{"name":"烫发剂壳","categroy":8},{"name":"瑞幸咖啡杯","categroy":8},{"name":"厨房纸巾","categroy":8},{"name":"塑料糖纸","categroy":8},{"name":"纸巾外包装","categroy":8},{"name":"卫生卷纸","categroy":8},{"name":"全棉时代纸巾","categroy":8},{"name":"雪糕棍","categroy":8},{"name":"卫生棒","categroy":8},{"name":"防蚊贴","categroy":8},{"name":"湿纸巾包装袋","categroy":8},{"name":"腋毛","categroy":8},{"name":"胡渣","categroy":8},{"name":"面条包装袋","categroy":8},{"name":"魔芋粉包装袋","categroy":8},{"name":"清凉贴","categroy":8},{"name":"固体清香剂","categroy":8},{"name":"腮红","categroy":8},{"name":"轻质彩泥","categroy":8},{"name":"巧克力锡纸","categroy":8},{"name":"橡皮擦","categroy":8},{"name":"黑板擦","categroy":8},{"name":"白板擦","categroy":8},{"name":"碗碎片","categroy":8},{"name":"湿烟头","categroy":8},{"name":"清洁抹布","categroy":8},{"name":"便签纸","categroy":8},{"name":"泡泡糖","categroy":8},{"name":"吸油面纸","categroy":8},{"name":"肉类包装盒","categroy":8},{"name":"扣子","categroy":8},{"name":"内衣包装袋","categroy":8},{"name":"太阳镜","categroy":8},{"name":"灭蚊片","categroy":8},{"name":"CD","categroy":8},{"name":"DVD","categroy":8},{"name":"混合猫砂","categroy":8},{"name":"水笔芯","categroy":8},{"name":"键盘清洁胶","categroy":8},{"name":"塑料夹子","categroy":8},{"name":"砚台","categroy":8},{"name":"证件塑料壳","categroy":8},{"name":"登机牌","categroy":8},{"name":"竹牙签","categroy":8},{"name":"牛尾骨","categroy":8},{"name":"湿纸箱","categroy":8},{"name":"风油精瓶","categroy":8},{"name":"驱蚊贴","categroy":8},{"name":"硅胶手环","categroy":8},{"name":"气垫BB霜","categroy":8},{"name":"橡皮屑","categroy":8},{"name":"中药面膜","categroy":8},{"name":"牙刷头","categroy":8},{"name":"牛肉干包装","categroy":8},{"name":"胸贴","categroy":8},{"name":"牛仔骨","categroy":8},{"name":"盐包装袋","categroy":8},{"name":"浴花","categroy":8},{"name":"扫描仪","categroy":1},{"name":"投影仪","categroy":1},{"name":"包装纸","categroy":1},{"name":"硬纸板","categroy":1},{"name":"纸板箱","categroy":1},{"name":"包装盒","categroy":1},{"name":"点心盒","categroy":1},{"name":"纸巾盒","categroy":1},{"name":"牛奶盒","categroy":1},{"name":"饮料利乐包装","categroy":1},{"name":"PET塑料瓶","categroy":1},{"name":"饮料瓶","categroy":1},{"name":"硬质塑料瓶","categroy":1},{"name":"塑料盒","categroy":1},{"name":"冰淇淋盒","categroy":1},{"name":"塑料杯","categroy":1},{"name":"酸奶杯","categroy":1},{"name":"果冻杯","categroy":1},{"name":"软桶","categroy":1},{"name":"塑料泡沫","categroy":1},{"name":"气泡缓冲材料","categroy":1},{"name":"水果网套","categroy":1},{"name":"废弃塑料文具","categroy":1},{"name":"玻璃瓶","categroy":1},{"name":"碎玻璃片","categroy":1},{"name":"其他玻璃制品","categroy":1},{"name":"金属盒","categroy":1},{"name":"其他金属制品","categroy":1},{"name":"金属文件柜","categroy":1},{"name":"沙发","categroy":1},{"name":"茶几","categroy":1},{"name":"办公桌","categroy":1},{"name":"文件柜","categroy":1},{"name":"椅子","categroy":1},{"name":"皮带","categroy":1},{"name":"香水瓶","categroy":1},{"name":"食品罐头","categroy":1},{"name":"旧书包","categroy":1},{"name":"旧鞋子","categroy":1},{"name":"旧塑料篮子","categroy":1},{"name":"旧玩偶","categroy":1},{"name":"旧铁锅","categroy":1},{"name":"不锈钢垃圾桶","categroy":1},{"name":"旧帽子","categroy":1},{"name":"旧夹子","categroy":1},{"name":"废锁头","categroy":1},{"name":"雨伞骨架","categroy":1},{"name":"旧纸袋","categroy":1},{"name":"纸盒","categroy":1},{"name":"旧玩具","categroy":1},{"name":"办公用纸","categroy":1},{"name":"广告用纸","categroy":1},{"name":"暖水瓶","categroy":1},{"name":"废弃衣服","categroy":1},{"name":"桌布","categroy":1},{"name":"塑料包装","categroy":1},{"name":"铁皮罐头","categroy":1},{"name":"报废车辆","categroy":1},{"name":"家电家具","categroy":1},{"name":"玻璃烟灰缸","categroy":1},{"name":"泡沫箱","categroy":1},{"name":"墨水瓶","categroy":1},{"name":"塑料垃圾桶","categroy":1},{"name":"塑料饮料杯","categroy":1},{"name":"吸铁石","categroy":1},{"name":"塑料假花","categroy":1},{"name":"指南针","categroy":1},{"name":"自行车轮胎","categroy":1},{"name":"袜子","categroy":1},{"name":"竹签","categroy":1},{"name":"旧衣服","categroy":1},{"name":"轮胎","categroy":1},{"name":"酸奶盒","categroy":1},{"name":"钉子","categroy":1},{"name":"地板砖","categroy":1},{"name":"塑料壳","categroy":1},{"name":"护肤品玻璃罐","categroy":1},{"name":"奶粉罐","categroy":1},{"name":"塑料瓶瓶盖","categroy":1},{"name":"锡纸","categroy":1},{"name":"废旧电子产品","categroy":1},{"name":"鞋垫","categroy":1},{"name":"过滤网","categroy":1},{"name":"皮鞋","categroy":1},{"name":"广告纸片","categroy":1},{"name":"打印纸","categroy":1},{"name":"菜刀","categroy":1},{"name":"塑料盆","categroy":1},{"name":"塑料桶","categroy":1},{"name":"塑料日用品","categroy":1},{"name":"塑料餐具","categroy":1},{"name":"塑料纸","categroy":1},{"name":"充电装置","categroy":1},{"name":"砖头","categroy":1},{"name":"水泥砖","categroy":1},{"name":"矿泉水桶","categroy":1},{"name":"可乐瓶","categroy":1},{"name":"废旧木柴","categroy":1},{"name":"保温袋","categroy":1},{"name":"碎纸","categroy":1},{"name":"铁盒","categroy":1},{"name":"插线板","categroy":1},{"name":"电风扇","categroy":1},{"name":"水龙头","categroy":1},{"name":"抗光屏","categroy":1},{"name":"幕布","categroy":1},{"name":"地球仪","categroy":1},{"name":"空气净化器过滤网","categroy":1},{"name":"化妆品瓶","categroy":1},{"name":"未被污染的输液瓶","categroy":1},{"name":"未被污染的输液袋","categroy":1},{"name":"手机","categroy":1},{"name":"溜冰鞋","categroy":1},{"name":"废电路板","categroy":1},{"name":"藤条","categroy":1},{"name":"棕榈蜡","categroy":1},{"name":"消毒液瓶","categroy":1},{"name":"自行车","categroy":1},{"name":"洗面奶瓶","categroy":1},{"name":"床垫","categroy":1},{"name":"木板","categroy":1},{"name":"铝箔纸","categroy":1},{"name":"铁制品","categroy":1},{"name":"铜制品","categroy":1},{"name":"泡沫塑料","categroy":1},{"name":"雪碧罐","categroy":1},{"name":"废旧小家电","categroy":1},{"name":"卫生纸内芯","categroy":1},{"name":"可口可乐瓶","categroy":1},{"name":"笔记本电脑","categroy":1},{"name":"电饭煲","categroy":1},{"name":"塑料玩具","categroy":1},{"name":"洗发水瓶","categroy":1},{"name":"护发素瓶","categroy":1},{"name":"洗衣液瓶","categroy":1},{"name":"皮包","categroy":1},{"name":"食用油桶","categroy":1},{"name":"塑料衣架","categroy":1},{"name":"铝膜","categroy":1},{"name":"塑料水管","categroy":1},{"name":"铁管","categroy":1},{"name":"铜管","categroy":1},{"name":"塑复钢管","categroy":1},{"name":"铝塑复合管","categroy":1},{"name":"金属管","categroy":1},{"name":"红酒瓶","categroy":1},{"name":"香槟瓶","categroy":1},{"name":"白酒瓶","categroy":1},{"name":"可乐瓶瓶盖","categroy":1},{"name":"电动玩具","categroy":1},{"name":"镜片","categroy":1},{"name":"照相机","categroy":1},{"name":"塑料花盆","categroy":1},{"name":"无纺布手提袋","categroy":1},{"name":"纸箱","categroy":1},{"name":"iPad","categroy":1},{"name":"墨汁瓶","categroy":1},{"name":"化妆水瓶","categroy":1},{"name":"护肤品瓶","categroy":1},{"name":"护肤乳液瓶","categroy":1},{"name":"酱油瓶","categroy":1},{"name":"钢琴","categroy":1},{"name":"手链","categroy":1},{"name":"手镯","categroy":1},{"name":"木头","categroy":1},{"name":"碎玻璃制品","categroy":1},{"name":"电动牙刷","categroy":1},{"name":"塑料包装纸盒","categroy":1},{"name":"金属香炉","categroy":1},{"name":"铅球","categroy":1},{"name":"脸摩仪","categroy":1},{"name":"脉动饮料瓶","categroy":1},{"name":"跑步机","categroy":1},{"name":"手电筒","categroy":1},{"name":"螺钉","categroy":1},{"name":"糖果罐","categroy":1},{"name":"毛绒玩具","categroy":1},{"name":"烧水壶","categroy":1},{"name":"电冰箱","categroy":1},{"name":"洗衣机","categroy":1},{"name":"电烤箱","categroy":1},{"name":"洗碗机","categroy":1},{"name":"扫地机器人","categroy":1},{"name":"面霜瓶","categroy":1},{"name":"糖果盒","categroy":1},{"name":"电话机","categroy":1},{"name":"小提琴","categroy":1},{"name":"塑料架","categroy":1},{"name":"茶叶罐","categroy":1},{"name":"酒精瓶","categroy":1},{"name":"座椅垫","categroy":1},{"name":"蛋挞盒","categroy":1},{"name":"纸质卡片","categroy":1},{"name":"硅胶玩具","categroy":1},{"name":"KFC纸袋","categroy":1},{"name":"旧报纸","categroy":1},{"name":"真空压缩袋","categroy":1},{"name":"螺丝","categroy":1},{"name":"尼龙袋","categroy":1},{"name":"纸塑铝复合包装","categroy":1},{"name":"油桶","categroy":1},{"name":"食品保鲜盒","categroy":1},{"name":"衣架","categroy":1},{"name":"玻璃放大镜","categroy":1},{"name":"窗玻璃","categroy":1},{"name":"刀","categroy":1},{"name":"螺丝刀","categroy":1},{"name":"枕头","categroy":1},{"name":"电子血压仪","categroy":1},{"name":"塑料饭盒","categroy":1},{"name":"木凳","categroy":1},{"name":"木椅","categroy":1},{"name":"收音机","categroy":1},{"name":"铃铛","categroy":1},{"name":"棉布","categroy":1},{"name":"咖啡隔热纸","categroy":1},{"name":"毛线","categroy":1},{"name":"塑料梳子","categroy":1},{"name":"旧锁","categroy":1},{"name":"纱线手套","categroy":1},{"name":"不锈钢勺子","categroy":1},{"name":"乐扣乐扣","categroy":1},{"name":"木质拼板","categroy":1},{"name":"眼霜罐","categroy":1},{"name":"马桶盖","categroy":1},{"name":"饮料瓶盖","categroy":1},{"name":"玻璃锅盖","categroy":1},{"name":"棉花被","categroy":1},{"name":"防晒衣","categroy":1},{"name":"地铁票","categroy":1},{"name":"脸盆","categroy":1},{"name":"脚盆","categroy":1},{"name":"洗脸仪","categroy":1},{"name":"电动剃须刀","categroy":1},{"name":"充电牙刷","categroy":1},{"name":"电炖锅","categroy":1},{"name":"高压锅","categroy":1},{"name":"热水袋","categroy":1},{"name":"充电热水袋","categroy":1},{"name":"玻璃碎片","categroy":1},{"name":"废钥匙","categroy":1},{"name":"干净饮料瓶","categroy":1},{"name":"废报纸","categroy":1},{"name":"旧被单","categroy":1},{"name":"废旧吸铁石","categroy":1},{"name":"冰红茶利乐包装","categroy":1},{"name":"金属瓶盖","categroy":1},{"name":"香烟盒","categroy":1},{"name":"香烟壳","categroy":1},{"name":"金手链","categroy":1},{"name":"金项链","categroy":1},{"name":"热水瓶","categroy":1},{"name":"脚垫","categroy":1},{"name":"钢化玻璃","categroy":1},{"name":"纸质杯套","categroy":1},{"name":"塑料杯套","categroy":1},{"name":"星巴克纸袋","categroy":1},{"name":"木条","categroy":1},{"name":"木棍","categroy":1},{"name":"簪子","categroy":1},{"name":"鼓棒","categroy":1},{"name":"奥特曼玩具","categroy":1},{"name":"洗手液瓶","categroy":1},{"name":"滑板","categroy":1},{"name":"电源插头","categroy":1},{"name":"信纸","categroy":1},{"name":"画框","categroy":1},{"name":"洗涤液瓶","categroy":1},{"name":"二手手机","categroy":1},{"name":"电动卷发棒","categroy":1},{"name":"洗洁精瓶","categroy":1},{"name":"拖把桶","categroy":1},{"name":"台布","categroy":1},{"name":"布艺窗帘","categroy":1},{"name":"软玻璃","categroy":1},{"name":"水晶板","categroy":1},{"name":"钨丝灯","categroy":1},{"name":"鲜奶盒","categroy":1},{"name":"球鞋","categroy":1},{"name":"草稿本","categroy":1},{"name":"鞋带","categroy":1},{"name":"干发帽","categroy":1},{"name":"铝箔袋","categroy":1},{"name":"纸质礼品盒","categroy":1},{"name":"易拉罐拉环","categroy":1},{"name":"书包","categroy":1},{"name":"铁调羹","categroy":1},{"name":"铁盒子","categroy":1},{"name":"浴帘","categroy":1},{"name":"泳帽","categroy":1},{"name":"泳衣","categroy":1},{"name":"电动保温箱","categroy":1},{"name":"起钉器","categroy":1},{"name":"消费卡","categroy":1},{"name":"步步高学习机","categroy":1},{"name":"塑料晾衣杆","categroy":1},{"name":"金属零件","categroy":1},{"name":"皮夹","categroy":1},{"name":"旧布鞋","categroy":1},{"name":"金子","categroy":1},{"name":"金器","categroy":1},{"name":"书本","categroy":1},{"name":"拉杆箱","categroy":1},{"name":"棉被","categroy":1},{"name":"金属钥匙扣","categroy":1},{"name":"午餐肉罐头","categroy":1},{"name":"帆布袋","categroy":1},{"name":"变形金刚","categroy":1},{"name":"皮质钱包","categroy":1},{"name":"肯德基纸袋","categroy":1},{"name":"纸牌","categroy":1},{"name":"旧拖鞋","categroy":1},{"name":"塑料酸奶盒","categroy":1},{"name":"老干妈瓶子","categroy":1},{"name":"洁厕灵瓶子","categroy":1},{"name":"耳钉","categroy":1},{"name":"奥特曼卡片","categroy":1},{"name":"旧枕头","categroy":1},{"name":"牛奶瓶","categroy":1},{"name":"衣服干洗剂瓶","categroy":1},{"name":"速冻食品保温袋","categroy":1},{"name":"泡沫保温箱","categroy":1},{"name":"玩具盒","categroy":1},{"name":"玩具塑料盒","categroy":1},{"name":"矿泉水瓶盖","categroy":1},{"name":"垃圾箱","categroy":1},{"name":"太空望远镜","categroy":1},{"name":"铁丝","categroy":1},{"name":"铜丝","categroy":1},{"name":"金属门吸","categroy":1},{"name":"吸门器","categroy":1},{"name":"瑜伽垫","categroy":1},{"name":"旧瑜伽垫","categroy":1},{"name":"纸袋子","categroy":1},{"name":"塑料膜","categroy":1},{"name":"铁罐","categroy":1},{"name":"鸡蛋盒","categroy":1},{"name":"隐形眼镜包装盒","categroy":1},{"name":"拍拍净瓶罐","categroy":1},{"name":"喜糖铁盒子","categroy":1},{"name":"废旧报纸","categroy":1},{"name":"磁带播放器","categroy":1},{"name":"纸质印刷品","categroy":1},{"name":"排插","categroy":1},{"name":"星巴克杯托","categroy":1},{"name":"料酒瓶","categroy":1},{"name":"木质拖把杆","categroy":1},{"name":"金属拖把杆","categroy":1},{"name":"小木棍","categroy":1},{"name":"旧皮鞋","categroy":1},{"name":"巴黎水玻璃瓶","categroy":1},{"name":"自拍杆","categroy":1},{"name":"置物架","categroy":1},{"name":"球拍","categroy":1},{"name":"清洁剂瓶","categroy":1},{"name":"木质玩具","categroy":1},{"name":"高尔夫球杆","categroy":1},{"name":"铜线","categroy":1},{"name":"快递纸箱","categroy":1},{"name":"旧相机","categroy":1},{"name":"乐高玩具","categroy":1},{"name":"棉拖鞋","categroy":1},{"name":"脏袜子","categroy":1},{"name":"羽毛球拍","categroy":1},{"name":"乒乓球拍","categroy":1},{"name":"电子灭蚊拍","categroy":1},{"name":"塑料瓶盖","categroy":1},{"name":"卷筒纸芯","categroy":1},{"name":"卡纸","categroy":1},{"name":"奶粉桶","categroy":1},{"name":"玩具塑料包装纸盒","categroy":1},{"name":"曲奇铁罐","categroy":1},{"name":"蓝罐曲奇盒","categroy":1},{"name":"塑料标签","categroy":1},{"name":"保鲜膜带齿盒","categroy":1},{"name":"内存卡","categroy":1},{"name":"背包","categroy":1},{"name":"酸奶玻璃瓶","categroy":1},{"name":"芯片","categroy":1},{"name":"鞋盒","categroy":1},{"name":"CPU","categroy":1},{"name":"漱口水瓶","categroy":1},{"name":"雨伞伞面","categroy":1},{"name":"电脑机箱","categroy":1},{"name":"塑料碗","categroy":1},{"name":"玻璃渣","categroy":1},{"name":"精华玻璃瓶","categroy":1},{"name":"衣服包装袋","categroy":1},{"name":"PS4","categroy":1},{"name":"蜂蜜柚子茶玻璃罐","categroy":1},{"name":"拖线板","categroy":1},{"name":"包书纸","categroy":1},{"name":"洁厕液瓶","categroy":1},{"name":"玻璃密封容器","categroy":1},{"name":"蓝牙耳机","categroy":1},{"name":"牛皮纸","categroy":1},{"name":"铅笔盒","categroy":1},{"name":"玻璃电子秤","categroy":1},{"name":"显示屏","categroy":1},{"name":"蜜蜡","categroy":1},{"name":"暖壶胆","categroy":1},{"name":"玻璃蜡烛杯","categroy":1},{"name":"雪弗板","categroy":1},{"name":"快递纸袋","categroy":1},{"name":"热水瓶胆","categroy":1},{"name":"木盒子","categroy":1},{"name":"枕芯","categroy":1},{"name":"旧跑鞋","categroy":1},{"name":"行李箱","categroy":1},{"name":"麦当劳咖啡杯杯盖（印有可回收标志）","categroy":1},{"name":"肯德基豆浆杯盖（印有可回收标志）","categroy":1},{"name":"羽绒服","categroy":1},{"name":"无纺布包","categroy":1},{"name":"保温壶","categroy":1},{"name":"金属晾衣杆","categroy":1},{"name":"橄榄球","categroy":1},{"name":"塑料桌布","categroy":1},{"name":"炒菜铁锅","categroy":1},{"name":"铁衣架","categroy":1},{"name":"网卡","categroy":1},{"name":"口香糖塑料盒","categroy":1},{"name":"美年达饮料瓶","categroy":1},{"name":"圆规","categroy":1},{"name":"布鞋套","categroy":1},{"name":"青铜","categroy":1},{"name":"皮料","categroy":1},{"name":"电锯","categroy":1},{"name":"钢尺","categroy":1},{"name":"水槽过滤网","categroy":1},{"name":"合金筷子","categroy":1},{"name":"螺丝钉","categroy":1},{"name":"饮料玻璃瓶","categroy":1},{"name":"玻璃花瓶","categroy":1},{"name":"旧剪刀","categroy":1},{"name":"电热水壶","categroy":1},{"name":"Kindle","categroy":1},{"name":"榨汁机","categroy":1},{"name":"搅拌器","categroy":1},{"name":"鱼竿","categroy":1},{"name":"芭比娃娃","categroy":1},{"name":"塑料储物箱","categroy":1},{"name":"脱排油烟机","categroy":1},{"name":"燃气灶","categroy":1},{"name":"童鞋","categroy":1},{"name":"闹铃","categroy":1},{"name":"电水壶","categroy":1},{"name":"旅行箱","categroy":1},{"name":"饼干盒","categroy":1},{"name":"首饰盒","categroy":1},{"name":"味全果汁瓶","categroy":1},{"name":"榨果汁机","categroy":1},{"name":"百叶窗","categroy":1},{"name":"金属鱼钩","categroy":1},{"name":"橡胶拖鞋","categroy":1},{"name":"化妆品外包装纸盒","categroy":1},{"name":"电瓶车防晒垫","categroy":1},{"name":"罐头瓶","categroy":1},{"name":"环保布质垃圾袋","categroy":1},{"name":"浴室防滑垫","categroy":1},{"name":"手机屏","categroy":1},{"name":"棉签盒","categroy":1},{"name":"羊毛被","categroy":1},{"name":"iPhone","categroy":1},{"name":"翡翠手镯","categroy":1},{"name":"汽车模型","categroy":1},{"name":"秋裤","categroy":1},{"name":"铁皮盖","categroy":1},{"name":"食用油玻璃瓶","categroy":1},{"name":"奶粉罐铝盖","categroy":1},{"name":"洗衣液桶","categroy":1},{"name":"吉他","categroy":1},{"name":"酱菜瓶","categroy":1},{"name":"腐乳瓶","categroy":1},{"name":"维他奶包装","categroy":1},{"name":"易拉罐盖","categroy":1},{"name":"指甲刀","categroy":1},{"name":"牙膏盒","categroy":1},{"name":"搓衣板","categroy":1},{"name":"咖啡杯套","categroy":1},{"name":"果酱瓶","categroy":1},{"name":"佐料瓶","categroy":1},{"name":"丝绸","categroy":1},{"name":"毛皮","categroy":1},{"name":"椰奶盒","categroy":1},{"name":"塑料文件袋","categroy":1},{"name":"美肤仪","categroy":1},{"name":"洁面仪","categroy":1},{"name":"健身器材","categroy":1},{"name":"纯牛奶纸盒","categroy":1},{"name":"电动刮痧板","categroy":1},{"name":"大提琴","categroy":1},{"name":"水果刀","categroy":1},{"name":"丝带","categroy":1},{"name":"塑料沙漏","categroy":1},{"name":"手机支撑架","categroy":1},{"name":"滴露瓶","categroy":1},{"name":"USB线","categroy":1},{"name":"塑料拖把杆","categroy":1},{"name":"番茄酱瓶","categroy":1},{"name":"牛奶塑料瓶","categroy":1},{"name":"旧窗帘","categroy":1},{"name":"椰汁瓶","categroy":1},{"name":"手机充电宝","categroy":1},{"name":"手机充电器","categroy":1},{"name":"凉鞋","categroy":1},{"name":"节能灯插座","categroy":1},{"name":"花洒软管","categroy":1},{"name":"软塑料隔热垫","categroy":1},{"name":"银行账单","categroy":1},{"name":"喷火枪","categroy":1},{"name":"酸奶瓶","categroy":1},{"name":"打气筒","categroy":1},{"name":"神仙水瓶","categroy":1},{"name":"塑料调色盘","categroy":1},{"name":"木勺","categroy":1},{"name":"卷纸内芯","categroy":1},{"name":"卷筒纸内芯","categroy":1},{"name":"椰奶罐","categroy":1},{"name":"卷纸芯","categroy":1},{"name":"木棒","categroy":1},{"name":"五金材料","categroy":1},{"name":"塑料锅铲","categroy":1},{"name":"木质锅铲","categroy":1},{"name":"牙线盒","categroy":1},{"name":"乐扣塑料盒","categroy":1},{"name":"乐扣玻璃盒","categroy":1},{"name":"木质花架","categroy":1},{"name":"绿茶包装盒","categroy":1},{"name":"电蒸锅","categroy":1},{"name":"钻戒","categroy":1},{"name":"银戒指","categroy":1},{"name":"即冲奶茶包装盒","categroy":1},{"name":"电容","categroy":1},{"name":"电阻","categroy":1},{"name":"二极管","categroy":1},{"name":"三极管","categroy":1},{"name":"废食用油瓶","categroy":1},{"name":"开关","categroy":1},{"name":"鸡蛋包装盒","categroy":1},{"name":"黑板","categroy":1},{"name":"豆浆机","categroy":1},{"name":"铁罐子","categroy":1},{"name":"CD塑料盒","categroy":1},{"name":"香薰玻璃瓶","categroy":1},{"name":"真皮制品","categroy":1},{"name":"羊皮制品","categroy":1},{"name":"皮草制品","categroy":1},{"name":"化妆品玻璃瓶","categroy":1},{"name":"帆布鞋","categroy":1},{"name":"休闲鞋","categroy":1},{"name":"关东煮隔热杯套","categroy":1},{"name":"烫衣板","categroy":1},{"name":"废弃药瓶","categroy":2},{"name":"手机电池","categroy":2},{"name":"废荧光灯管","categroy":2},{"name":"废水银温度计","categroy":2},{"name":"废水银血压计","categroy":2},{"name":"过期药品","categroy":2},{"name":"废农药","categroy":2},{"name":"节能灯（含水银）","categroy":2},{"name":"LED 灯（含水银）","categroy":2},{"name":"油漆桶","categroy":2},{"name":"酒精","categroy":2},{"name":"调色板","categroy":2},{"name":"过期的胶囊药物","categroy":2},{"name":"过期药片","categroy":2},{"name":"医用棉签","categroy":2},{"name":"医用手套","categroy":2},{"name":"农药瓶","categroy":2},{"name":"医用纱布","categroy":2},{"name":"口服液瓶","categroy":2},{"name":"废弃灯泡","categroy":2},{"name":"油漆笔","categroy":2},{"name":"锂电池","categroy":2},{"name":"生石灰","categroy":2},{"name":"胶卷底片","categroy":2},{"name":"废矿物油","categroy":2},{"name":"消毒剂","categroy":2},{"name":"胶片","categroy":2},{"name":"废血压计","categroy":2},{"name":"废镍镉电池","categroy":2},{"name":"氧化汞电池","categroy":2},{"name":"工业胶水","categroy":2},{"name":"胶合剂","categroy":2},{"name":"染发剂","categroy":2},{"name":"染发膏","categroy":2},{"name":"钮扣电池","categroy":2},{"name":"打印机墨盒","categroy":2},{"name":"硒鼓","categroy":2},{"name":"指甲油瓶子","categroy":2},{"name":"雷达瓶子","categroy":2},{"name":"塑料药盒","categroy":2},{"name":"过期指甲油","categroy":2},{"name":"卸甲膜","categroy":2},{"name":"医用针管","categroy":2},{"name":"膏药","categroy":2},{"name":"药瓶","categroy":2},{"name":"药包装","categroy":2},{"name":"咳嗽药水瓶","categroy":2},{"name":"针头","categroy":2},{"name":"塑料药瓶","categroy":2},{"name":"药片包装","categroy":2},{"name":"药品包装袋","categroy":2},{"name":"一次性注射器","categroy":2},{"name":"玻璃药瓶","categroy":2},{"name":"开塞露","categroy":2},{"name":"板蓝根冲剂","categroy":2},{"name":"口服液","categroy":2},{"name":"铅酸电池","categroy":2},{"name":"荧光灯","categroy":2},{"name":"卸甲水","categroy":2},{"name":"水银体温计","categroy":2},{"name":"X光片","categroy":2},{"name":"相片底片","categroy":2},{"name":"深海鱼油","categroy":2},{"name":"眼药水","categroy":2},{"name":"笔记本电脑电池","categroy":2},{"name":"过期感冒药","categroy":2},{"name":"冻干粉","categroy":2},{"name":"杀虫子罐","categroy":2},{"name":"染发手套","categroy":2},{"name":"钙片","categroy":2},{"name":"药膏","categroy":2},{"name":"药膏包装壳","categroy":2},{"name":"眼药水瓶","categroy":2},{"name":"药水玻璃瓶","categroy":2},{"name":"空药瓶","categroy":2},{"name":"空调清洗消毒液瓶","categroy":2},{"name":"安神补脑液瓶","categroy":2},{"name":"蟑螂药","categroy":2},{"name":"过期西药","categroy":2},{"name":"药品纸盒","categroy":2},{"name":"伤筋膏药","categroy":2},{"name":"伤筋药膏包装","categroy":2},{"name":"止痛膏","categroy":2},{"name":"纸药盒","categroy":2},{"name":"除渍剂","categroy":2},{"name":"西药瓶","categroy":2},{"name":"保健品瓶子","categroy":2},{"name":"打印机色带","categroy":2},{"name":"给药器","categroy":2},{"name":"松节油","categroy":2},{"name":"维生素瓶","categroy":2},{"name":"药液袋","categroy":2},{"name":"药片铝塑包装","categroy":2},{"name":"医用注射器","categroy":2},{"name":"输液瓶","categroy":2},{"name":"碳粉盒","categroy":2},{"name":"化学剂桶","categroy":2},{"name":"胶水桶","categroy":2},{"name":"马应龙","categroy":2},{"name":"鱼油胶囊","categroy":2},{"name":"药壶","categroy":2},{"name":"碘酒瓶","categroy":2},{"name":"外敷伤药","categroy":2},{"name":"膏药布","categroy":2},{"name":"透明塑料药瓶","categroy":2},{"name":"樟脑丸","categroy":2},{"name":"电灯泡","categroy":2},{"name":"金霉素眼药膏","categroy":2},{"name":"咳嗽药片","categroy":2},{"name":"达克宁药膏","categroy":2},{"name":"达克宁药膏皮","categroy":2},{"name":"卸甲油","categroy":2},{"name":"止咳糖浆瓶","categroy":2},{"name":"痔疮膏","categroy":2},{"name":"泡腾片","categroy":2}];

/***/ }),

/***/ "../../../../Users/Administrator/Project/the100questions/main.js":
/*!**************************************************************!*\
  !*** C:/Users/Administrator/Project/the100questions/main.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(createApp) {__webpack_require__(/*! uni-pages */ "../../../../Users/Administrator/Project/the100questions/pages.json");
var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ "./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js"));
var _App = _interopRequireDefault(__webpack_require__(/*! ./App */ "../../../../Users/Administrator/Project/the100questions/App.vue"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

_vue.default.config.productionTip = false;

_App.default.mpType = 'app';

var app = new _vue.default(_objectSpread({},
_App.default));

createApp(app).$mount();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ "./node_modules/@dcloudio/uni-mp-weixin/dist/index.js")["createApp"]))

/***/ }),

/***/ "../../../../Users/Administrator/Project/the100questions/main.js?{\"page\":\"pages%2Findex%2Findex\"}":
/*!***********************************************************************************************!*\
  !*** C:/Users/Administrator/Project/the100questions/main.js?{"page":"pages%2Findex%2Findex"} ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ "../../../../Users/Administrator/Project/the100questions/pages.json");

var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ "./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js"));
var _index = _interopRequireDefault(__webpack_require__(/*! ./pages/index/index.vue */ "../../../../Users/Administrator/Project/the100questions/pages/index/index.vue"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
createPage(_index.default);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ "./node_modules/@dcloudio/uni-mp-weixin/dist/index.js")["createPage"]))

/***/ }),

/***/ "../../../../Users/Administrator/Project/the100questions/main.js?{\"page\":\"pages%2Frubbish_categary%2Findex\"}":
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Project/the100questions/main.js?{"page":"pages%2Frubbish_categary%2Findex"} ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(createPage) {__webpack_require__(/*! uni-pages */ "../../../../Users/Administrator/Project/the100questions/pages.json");

var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ "./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js"));
var _index = _interopRequireDefault(__webpack_require__(/*! ./pages/rubbish_categary/index.vue */ "../../../../Users/Administrator/Project/the100questions/pages/rubbish_categary/index.vue"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
createPage(_index.default);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ "./node_modules/@dcloudio/uni-mp-weixin/dist/index.js")["createPage"]))

/***/ }),

/***/ "../../../../Users/Administrator/Project/the100questions/pages.json":
/*!*****************************************************************!*\
  !*** C:/Users/Administrator/Project/the100questions/pages.json ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***/ }),

/***/ "./node_modules/@dcloudio/uni-mp-weixin/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.createApp = createApp;exports.createPage = createPage;exports.createComponent = createComponent;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ "./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isFn(fn) {
  return typeof fn === 'function';
}

function isStr(str) {
  return typeof str === 'string';
}

function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function noop() {}

/**
                    * Create a cached version of a pure function.
                    */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
   * Camelize a hyphen-delimited string.
   */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});
});

var SYNC_API_RE = /^\$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;

var CONTEXT_API_RE = /^create|Manager$/;

var CALLBACK_API_RE = /^on/;

function isContextApi(name) {
  return CONTEXT_API_RE.test(name);
}
function isSyncApi(name) {
  return SYNC_API_RE.test(name);
}

function isCallbackApi(name) {
  return CALLBACK_API_RE.test(name);
}

function handlePromise(promise) {
  return promise.then(function (data) {
    return [null, data];
  }).
  catch(function (err) {return [err];});
}

function shouldPromise(name) {
  if (
  isContextApi(name) ||
  isSyncApi(name) ||
  isCallbackApi(name))
  {
    return false;
  }
  return true;
}

function promisify(name, api) {
  if (!shouldPromise(name)) {
    return api;
  }
  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {params[_key - 1] = arguments[_key];}
    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {
      return api.apply(void 0, [options].concat(params));
    }
    return handlePromise(new Promise(function (resolve, reject) {
      api.apply(void 0, [Object.assign({}, options, {
        success: resolve,
        fail: reject })].concat(
      params));
      /* eslint-disable no-extend-native */
      if (!Promise.prototype.finally) {
        Promise.prototype.finally = function (callback) {
          var promise = this.constructor;
          return this.then(
          function (value) {return promise.resolve(callback()).then(function () {return value;});},
          function (reason) {return promise.resolve(callback()).then(function () {
              throw reason;
            });});

        };
      }
    }));
  };
}

var EPS = 1e-4;
var BASE_DEVICE_WIDTH = 750;
var isIOS = false;
var deviceWidth = 0;
var deviceDPR = 0;

function checkDeviceWidth() {var _wx$getSystemInfoSync =




  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni

  deviceWidth = windowWidth;
  deviceDPR = pixelRatio;
  isIOS = platform === 'ios';
}

function upx2px(number, newDeviceWidth) {
  if (deviceWidth === 0) {
    checkDeviceWidth();
  }

  number = Number(number);
  if (number === 0) {
    return 0;
  }
  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);
  if (result < 0) {
    result = -result;
  }
  result = Math.floor(result + EPS);
  if (result === 0) {
    if (deviceDPR === 1 || !isIOS) {
      return 1;
    } else {
      return 0.5;
    }
  }
  return number < 0 ? -result : result;
}

var previewImage = {
  args: function args(fromArgs) {
    var currentIndex = parseInt(fromArgs.current);
    if (isNaN(currentIndex)) {
      return;
    }
    var urls = fromArgs.urls;
    if (!Array.isArray(urls)) {
      return;
    }
    var len = urls.length;
    if (!len) {
      return;
    }
    if (currentIndex < 0) {
      currentIndex = 0;
    } else if (currentIndex >= len) {
      currentIndex = len - 1;
    }
    if (currentIndex > 0) {
      fromArgs.current = urls[currentIndex];
      fromArgs.urls = urls.filter(
      function (item, index) {return index < currentIndex ? item !== urls[currentIndex] : true;});

    } else {
      fromArgs.current = urls[0];
    }
    return {
      indicator: false,
      loop: false };

  } };


var protocols = {
  previewImage: previewImage };

var todos = [];
var canIUses = [];

var CALLBACKS = ['success', 'fail', 'cancel', 'complete'];

function processCallback(methodName, method, returnValue) {
  return function (res) {
    return method(processReturnValue(methodName, res, returnValue));
  };
}

function processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析
    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值
    if (isFn(argsOption)) {
      argsOption = argsOption(fromArgs, toArgs) || {};
    }
    for (var key in fromArgs) {
      if (hasOwn(argsOption, key)) {
        var keyOption = argsOption[key];
        if (isFn(keyOption)) {
          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);
        }
        if (!keyOption) {// 不支持的参数
          console.warn("\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F ".concat(methodName, "\u6682\u4E0D\u652F\u6301").concat(key));
        } else if (isStr(keyOption)) {// 重写参数 key
          toArgs[keyOption] = fromArgs[key];
        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value
          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;
        }
      } else if (CALLBACKS.indexOf(key) !== -1) {
        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);
      } else {
        if (!keepFromArgs) {
          toArgs[key] = fromArgs[key];
        }
      }
    }
    return toArgs;
  } else if (isFn(fromArgs)) {
    fromArgs = processCallback(methodName, fromArgs, returnValue);
  }
  return fromArgs;
}

function processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (isFn(protocols.returnValue)) {// 处理通用 returnValue
    res = protocols.returnValue(methodName, res);
  }
  return processArgs(methodName, res, returnValue, {}, keepReturnValue);
}

function wrapper(methodName, method) {
  if (hasOwn(protocols, methodName)) {
    var protocol = protocols[methodName];
    if (!protocol) {// 暂不支持的 api
      return function () {
        console.error("\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F \u6682\u4E0D\u652F\u6301".concat(methodName));
      };
    }
    return function (arg1, arg2) {// 目前 api 最多两个参数
      var options = protocol;
      if (isFn(protocol)) {
        options = protocol(arg1);
      }

      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);

      var args = [arg1];
      if (typeof arg2 !== 'undefined') {
        args.push(arg2);
      }
      var returnValue = wx[options.name || methodName].apply(wx, args);
      if (isSyncApi(methodName)) {// 同步 api
        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));
      }
      return returnValue;
    };
  }
  return method;
}

var todoApis = Object.create(null);

var TODOS = [
'subscribePush',
'unsubscribePush',
'onPush',
'offPush',
'share'];


function createTodoApi(name) {
  return function todoApi(_ref)


  {var fail = _ref.fail,complete = _ref.complete;
    var res = {
      errMsg: "".concat(name, ":fail:\u6682\u4E0D\u652F\u6301 ").concat(name, " \u65B9\u6CD5") };

    isFn(fail) && fail(res);
    isFn(complete) && complete(res);
  };
}

TODOS.forEach(function (name) {
  todoApis[name] = createTodoApi(name);
});

var providers = {
  oauth: ['weixin'],
  share: ['weixin'],
  payment: ['wxpay'],
  push: ['weixin'] };


function getProvider(_ref2)




{var service = _ref2.service,success = _ref2.success,fail = _ref2.fail,complete = _ref2.complete;
  var res = false;
  if (providers[service]) {
    res = {
      errMsg: 'getProvider:ok',
      service: service,
      provider: providers[service] };

    isFn(success) && success(res);
  } else {
    res = {
      errMsg: 'getProvider:fail:服务[' + service + ']不存在' };

    isFn(fail) && fail(res);
  }
  isFn(complete) && complete(res);
}

var extraApi = /*#__PURE__*/Object.freeze({
  getProvider: getProvider });


var getEmitter = function () {
  if (typeof getUniEmitter === 'function') {
    /* eslint-disable no-undef */
    return getUniEmitter;
  }
  var Emitter;
  return function getUniEmitter() {
    if (!Emitter) {
      Emitter = new _vue.default();
    }
    return Emitter;
  };
}();

function apply(ctx, method, args) {
  return ctx[method].apply(ctx, args);
}

function $on() {
  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));
}
function $off() {
  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));
}
function $once() {
  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));
}
function $emit() {
  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));
}



var eventApi = /*#__PURE__*/Object.freeze({
  $on: $on,
  $off: $off,
  $once: $once,
  $emit: $emit });




var api = /*#__PURE__*/Object.freeze({});



var MPPage = Page;
var MPComponent = Component;

var customizeRE = /:/g;

var customize = cached(function (str) {
  return camelize(str.replace(customizeRE, '-'));
});

function initTriggerEvent(mpInstance) {
  {
    if (!wx.canIUse('nextTick')) {
      return;
    }
  }
  var oldTriggerEvent = mpInstance.triggerEvent;
  mpInstance.triggerEvent = function (event) {for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {args[_key2 - 1] = arguments[_key2];}
    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));
  };
}

function initHook(name, options) {
  var oldHook = options[name];
  if (!oldHook) {
    options[name] = function () {
      initTriggerEvent(this);
    };
  } else {
    options[name] = function () {
      initTriggerEvent(this);for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}
      return oldHook.apply(this, args);
    };
  }
}

Page = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  initHook('onLoad', options);
  return MPPage(options);
};

Component = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  initHook('created', options);
  return MPComponent(options);
};

var PAGE_EVENT_HOOKS = [
'onPullDownRefresh',
'onReachBottom',
'onShareAppMessage',
'onPageScroll',
'onResize',
'onTabItemTap'];


function initMocks(vm, mocks) {
  var mpInstance = vm.$mp[vm.mpType];
  mocks.forEach(function (mock) {
    if (hasOwn(mpInstance, mock)) {
      vm[mock] = mpInstance[mock];
    }
  });
}

function initHooks(mpOptions, hooks) {
  hooks.forEach(function (hook) {
    mpOptions[hook] = function (args) {
      return this.$vm && this.$vm.__call_hook(hook, args);
    };
  });
}

function initVueComponent(Vue$$1, vueOptions) {
  vueOptions = vueOptions.default || vueOptions;
  var VueComponent;
  if (isFn(vueOptions)) {
    VueComponent = vueOptions;
    vueOptions = VueComponent.extendOptions;
  } else {
    VueComponent = Vue$$1.extend(vueOptions);
  }
  return [VueComponent, vueOptions];
}

function initSlots(vm, vueSlots) {
  if (Array.isArray(vueSlots) && vueSlots.length) {
    var $slots = Object.create(null);
    vueSlots.forEach(function (slotName) {
      $slots[slotName] = true;
    });
    vm.$scopedSlots = vm.$slots = $slots;
  }
}

function initVueIds(vueIds, mpInstance) {
  vueIds = (vueIds || '').split(',');
  var len = vueIds.length;

  if (len === 1) {
    mpInstance._$vueId = vueIds[0];
  } else if (len === 2) {
    mpInstance._$vueId = vueIds[0];
    mpInstance._$vuePid = vueIds[1];
  }
}

function initData(vueOptions, context) {
  var data = vueOptions.data || {};
  var methods = vueOptions.methods || {};

  if (typeof data === 'function') {
    try {
      data = data.call(context); // 支持 Vue.prototype 上挂的数据
    } catch (e) {
      if (Object({"VUE_APP_PLATFORM":"mp-weixin","NODE_ENV":"development","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);
      }
    }
  } else {
    try {
      // 对 data 格式化
      data = JSON.parse(JSON.stringify(data));
    } catch (e) {}
  }

  if (!isPlainObject(data)) {
    data = {};
  }

  Object.keys(methods).forEach(function (methodName) {
    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {
      data[methodName] = methods[methodName];
    }
  });

  return data;
}

var PROP_TYPES = [String, Number, Boolean, Object, Array, null];

function createObserver(name) {
  return function observer(newVal, oldVal) {
    if (this.$vm) {
      this.$vm[name] = newVal; // 为了触发其他非 render watcher
    }
  };
}

function initBehaviors(vueOptions, initBehavior) {
  var vueBehaviors = vueOptions['behaviors'];
  var vueExtends = vueOptions['extends'];
  var vueMixins = vueOptions['mixins'];

  var vueProps = vueOptions['props'];

  if (!vueProps) {
    vueOptions['props'] = vueProps = [];
  }

  var behaviors = [];
  if (Array.isArray(vueBehaviors)) {
    vueBehaviors.forEach(function (behavior) {
      behaviors.push(behavior.replace('uni://', "wx".concat("://")));
      if (behavior === 'uni://form-field') {
        if (Array.isArray(vueProps)) {
          vueProps.push('name');
          vueProps.push('value');
        } else {
          vueProps['name'] = String;
          vueProps['value'] = null;
        }
      }
    });
  }
  if (isPlainObject(vueExtends) && vueExtends.props) {
    behaviors.push(
    initBehavior({
      properties: initProperties(vueExtends.props, true) }));


  }
  if (Array.isArray(vueMixins)) {
    vueMixins.forEach(function (vueMixin) {
      if (isPlainObject(vueMixin) && vueMixin.props) {
        behaviors.push(
        initBehavior({
          properties: initProperties(vueMixin.props, true) }));


      }
    });
  }
  return behaviors;
}

function parsePropType(key, type, defaultValue, file) {
  // [String]=>String
  if (Array.isArray(type) && type.length === 1) {
    return type[0];
  }
  return type;
}

function initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var properties = {};
  if (!isBehavior) {
    properties.vueId = {
      type: String,
      value: '' };

    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots
      type: null,
      value: [],
      observer: function observer(newVal, oldVal) {
        var $slots = Object.create(null);
        newVal.forEach(function (slotName) {
          $slots[slotName] = true;
        });
        this.setData({
          $slots: $slots });

      } };

  }
  if (Array.isArray(props)) {// ['title']
    props.forEach(function (key) {
      properties[key] = {
        type: null,
        observer: createObserver(key) };

    });
  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}
    Object.keys(props).forEach(function (key) {
      var opts = props[key];
      if (isPlainObject(opts)) {// title:{type:String,default:''}
        var value = opts['default'];
        if (isFn(value)) {
          value = value();
        }

        opts.type = parsePropType(key, opts.type, value, file);

        properties[key] = {
          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,
          value: value,
          observer: createObserver(key) };

      } else {// content:String
        var type = parsePropType(key, opts, null, file);
        properties[key] = {
          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,
          observer: createObserver(key) };

      }
    });
  }
  return properties;
}

function wrapper$1(event) {
  // TODO 又得兼容 mpvue 的 mp 对象
  try {
    event.mp = JSON.parse(JSON.stringify(event));
  } catch (e) {}

  event.stopPropagation = noop;
  event.preventDefault = noop;

  event.target = event.target || {};

  if (!hasOwn(event, 'detail')) {
    event.detail = {};
  }

  if (isPlainObject(event.detail)) {
    event.target = Object.assign({}, event.target, event.detail);
  }

  return event;
}

function getExtraValue(vm, dataPathsArray) {
  var context = vm;
  dataPathsArray.forEach(function (dataPathArray) {
    var dataPath = dataPathArray[0];
    var value = dataPathArray[2];
    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']
      var propPath = dataPathArray[1];
      var valuePath = dataPathArray[3];

      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;

      if (Number.isInteger(vFor)) {
        context = value;
      } else if (!propPath) {
        context = vFor[value];
      } else {
        if (Array.isArray(vFor)) {
          context = vFor.find(function (vForItem) {
            return vm.__get_value(propPath, vForItem) === value;
          });
        } else if (isPlainObject(vFor)) {
          context = Object.keys(vFor).find(function (vForKey) {
            return vm.__get_value(propPath, vFor[vForKey]) === value;
          });
        } else {
          console.error('v-for 暂不支持循环数据：', vFor);
        }
      }

      if (valuePath) {
        context = vm.__get_value(valuePath, context);
      }
    }
  });
  return context;
}

function processEventExtra(vm, extra, event) {
  var extraObj = {};

  if (Array.isArray(extra) && extra.length) {
    /**
                                                  *[
                                                  *    ['data.items', 'data.id', item.data.id],
                                                  *    ['metas', 'id', meta.id]
                                                  *],
                                                  *[
                                                  *    ['data.items', 'data.id', item.data.id],
                                                  *    ['metas', 'id', meta.id]
                                                  *],
                                                  *'test'
                                                  */
    extra.forEach(function (dataPath, index) {
      if (typeof dataPath === 'string') {
        if (!dataPath) {// model,prop.sync
          extraObj['$' + index] = vm;
        } else {
          if (dataPath === '$event') {// $event
            extraObj['$' + index] = event;
          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value
            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);
          } else {
            extraObj['$' + index] = vm.__get_value(dataPath);
          }
        }
      } else {
        extraObj['$' + index] = getExtraValue(vm, dataPath);
      }
    });
  }

  return extraObj;
}

function getObjByArray(arr) {
  var obj = {};
  for (var i = 1; i < arr.length; i++) {
    var element = arr[i];
    obj[element[0]] = element[1];
  }
  return obj;
}

function processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;
  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象
  if (isCustom) {// 自定义事件
    isCustomMPEvent = event.currentTarget &&
    event.currentTarget.dataset &&
    event.currentTarget.dataset.comType === 'wx';
    if (!args.length) {// 无参数，直接传入 event 或 detail 数组
      if (isCustomMPEvent) {
        return [event];
      }
      return event.detail.__args__ || event.detail;
    }
  }

  var extraObj = processEventExtra(vm, extra, event);

  var ret = [];
  args.forEach(function (arg) {
    if (arg === '$event') {
      if (methodName === '__set_model' && !isCustom) {// input v-model value
        ret.push(event.target.value);
      } else {
        if (isCustom && !isCustomMPEvent) {
          ret.push(event.detail.__args__[0]);
        } else {// wxcomponent 组件或内置组件
          ret.push(event);
        }
      }
    } else {
      if (Array.isArray(arg) && arg[0] === 'o') {
        ret.push(getObjByArray(arg));
      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {
        ret.push(extraObj[arg]);
      } else {
        ret.push(arg);
      }
    }
  });

  return ret;
}

var ONCE = '~';
var CUSTOM = '^';

function isMatchEventType(eventType, optType) {
  return eventType === optType ||

  optType === 'regionchange' && (

  eventType === 'begin' ||
  eventType === 'end');


}

function handleEvent(event) {var _this = this;
  event = wrapper$1(event);

  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]
  var eventOpts = (event.currentTarget || event.target).dataset.eventOpts;
  if (!eventOpts) {
    return console.warn("\u4E8B\u4EF6\u4FE1\u606F\u4E0D\u5B58\u5728");
  }

  // [['handle',[1,2,a]],['handle1',[1,2,a]]]
  var eventType = event.type;
  eventOpts.forEach(function (eventOpt) {
    var type = eventOpt[0];
    var eventsArray = eventOpt[1];

    var isCustom = type.charAt(0) === CUSTOM;
    type = isCustom ? type.slice(1) : type;
    var isOnce = type.charAt(0) === ONCE;
    type = isOnce ? type.slice(1) : type;

    if (eventsArray && isMatchEventType(eventType, type)) {
      eventsArray.forEach(function (eventArray) {
        var methodName = eventArray[0];
        if (methodName) {
          var handlerCtx = _this.$vm;
          if (
          handlerCtx.$options.generic &&
          handlerCtx.$parent &&
          handlerCtx.$parent.$parent)
          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots
            handlerCtx = handlerCtx.$parent.$parent;
          }
          var handler = handlerCtx[methodName];
          if (!isFn(handler)) {
            throw new Error(" _vm.".concat(methodName, " is not a function"));
          }
          if (isOnce) {
            if (handler.once) {
              return;
            }
            handler.once = true;
          }
          handler.apply(handlerCtx, processEventArgs(
          _this.$vm,
          event,
          eventArray[1],
          eventArray[2],
          isCustom,
          methodName));

        }
      });
    }
  });
}

var hooks = [
'onShow',
'onHide',
'onError',
'onPageNotFound'];


function parseBaseApp(vm, _ref3)


{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;
  _vue.default.prototype.mpHost = "mp-weixin";

  _vue.default.mixin({
    beforeCreate: function beforeCreate() {
      if (!this.$options.mpType) {
        return;
      }

      this.mpType = this.$options.mpType;

      this.$mp = _defineProperty({
        data: {} },
      this.mpType, this.$options.mpInstance);


      this.$scope = this.$options.mpInstance;

      delete this.$options.mpType;
      delete this.$options.mpInstance;

      if (this.mpType !== 'app') {
        initRefs(this);
        initMocks(this, mocks);
      }
    } });


  var appOptions = {
    onLaunch: function onLaunch(args) {
      {
        if (!wx.canIUse('nextTick')) {// 事实 上2.2.3 即可，简单使用 2.3.0 的 nextTick 判断
          console.error('当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上');
        }
      }

      this.$vm = vm;

      this.$vm.$mp = {
        app: this };


      this.$vm.$scope = this;

      this.$vm._isMounted = true;
      this.$vm.__call_hook('mounted', args);

      this.$vm.__call_hook('onLaunch', args);
    } };


  // 兼容旧版本 globalData
  appOptions.globalData = vm.$options.globalData || {};

  initHooks(appOptions, hooks);

  return appOptions;
}

var mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];

function findVmByVueId(vm, vuePid) {
  var $children = vm.$children;
  // 优先查找直属
  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});
  if (parentVm) {
    return parentVm;
  }
  // 反向递归查找
  for (var i = $children.length - 1; i >= 0; i--) {
    parentVm = findVmByVueId($children[i], vuePid);
    if (parentVm) {
      return parentVm;
    }
  }
}

function initBehavior(options) {
  return Behavior(options);
}

function isPage() {
  return !!this.route;
}

function initRelation(detail) {
  this.triggerEvent('__l', detail);
}

function initRefs(vm) {
  var mpInstance = vm.$scope;
  Object.defineProperty(vm, '$refs', {
    get: function get() {
      var $refs = {};
      var components = mpInstance.selectAllComponents('.vue-ref');
      components.forEach(function (component) {
        var ref = component.dataset.ref;
        $refs[ref] = component.$vm || component;
      });
      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');
      forComponents.forEach(function (component) {
        var ref = component.dataset.ref;
        if (!$refs[ref]) {
          $refs[ref] = [];
        }
        $refs[ref].push(component.$vm || component);
      });
      return $refs;
    } });

}

function handleLink(event) {var _ref4 =



  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)

  var parentVm;

  if (vuePid) {
    parentVm = findVmByVueId(this.$vm, vuePid);
  }

  if (!parentVm) {
    parentVm = this.$vm;
  }

  vueOptions.parent = parentVm;
}

function parseApp(vm) {
  return parseBaseApp(vm, {
    mocks: mocks,
    initRefs: initRefs });

}

function createApp(vm) {
  App(parseApp(vm));
  return vm;
}

function parseBaseComponent(vueComponentOptions)


{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage$$1 = _ref5.isPage,initRelation$$1 = _ref5.initRelation;var _initVueComponent =
  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];

  var componentOptions = {
    options: {
      multipleSlots: true,
      addGlobalClass: true },

    data: initData(vueOptions, _vue.default.prototype),
    behaviors: initBehaviors(vueOptions, initBehavior),
    properties: initProperties(vueOptions.props, false, vueOptions.__file),
    lifetimes: {
      attached: function attached() {
        var properties = this.properties;

        var options = {
          mpType: isPage$$1.call(this) ? 'page' : 'component',
          mpInstance: this,
          propsData: properties };


        initVueIds(properties.vueId, this);

        // 处理父子关系
        initRelation$$1.call(this, {
          vuePid: this._$vuePid,
          vueOptions: options });


        // 初始化 vue 实例
        this.$vm = new VueComponent(options);

        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）
        initSlots(this.$vm, properties.vueSlots);

        // 触发首次 setData
        this.$vm.$mount();
      },
      ready: function ready() {
        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发
        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800
        if (this.$vm) {
          this.$vm._isMounted = true;
          this.$vm.__call_hook('mounted');
          this.$vm.__call_hook('onReady');
        }
      },
      detached: function detached() {
        this.$vm.$destroy();
      } },

    pageLifetimes: {
      show: function show(args) {
        this.$vm && this.$vm.__call_hook('onPageShow', args);
      },
      hide: function hide() {
        this.$vm && this.$vm.__call_hook('onPageHide');
      },
      resize: function resize(size) {
        this.$vm && this.$vm.__call_hook('onPageResize', size);
      } },

    methods: {
      __l: handleLink,
      __e: handleEvent } };



  if (isPage$$1) {
    return componentOptions;
  }
  return [componentOptions, VueComponent];
}

function parseComponent(vueComponentOptions) {
  return parseBaseComponent(vueComponentOptions, {
    isPage: isPage,
    initRelation: initRelation });

}

var hooks$1 = [
'onShow',
'onHide',
'onUnload'];


hooks$1.push.apply(hooks$1, PAGE_EVENT_HOOKS);

function parseBasePage(vuePageOptions, _ref6)


{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;
  var pageOptions = parseComponent(vuePageOptions, {
    isPage: isPage,
    initRelation: initRelation });


  initHooks(pageOptions.methods, hooks$1);

  pageOptions.methods.onLoad = function (args) {
    this.$vm.$mp.query = args; // 兼容 mpvue
    this.$vm.__call_hook('onLoad', args);
  };

  return pageOptions;
}

function parsePage(vuePageOptions) {
  return parseBasePage(vuePageOptions, {
    isPage: isPage,
    initRelation: initRelation });

}

function createPage(vuePageOptions) {
  {
    return Component(parsePage(vuePageOptions));
  }
}

function createComponent(vueOptions) {
  {
    return Component(parseComponent(vueOptions));
  }
}

todos.forEach(function (todoApi) {
  protocols[todoApi] = false;
});

canIUses.forEach(function (canIUseApi) {
  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :
  canIUseApi;
  if (!wx.canIUse(apiName)) {
    protocols[canIUseApi] = false;
  }
});

var uni = {};

if (typeof Proxy !== 'undefined') {
  uni = new Proxy({}, {
    get: function get(target, name) {
      if (name === 'upx2px') {
        return upx2px;
      }
      if (api[name]) {
        return promisify(name, api[name]);
      }
      {
        if (extraApi[name]) {
          return promisify(name, extraApi[name]);
        }
        if (todoApis[name]) {
          return promisify(name, todoApis[name]);
        }
      }
      if (eventApi[name]) {
        return eventApi[name];
      }
      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {
        return;
      }
      return promisify(name, wrapper(name, wx[name]));
    } });

} else {
  uni.upx2px = upx2px;

  {
    Object.keys(todoApis).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
    Object.keys(extraApi).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
  }

  Object.keys(eventApi).forEach(function (name) {
    uni[name] = eventApi[name];
  });

  Object.keys(api).forEach(function (name) {
    uni[name] = promisify(name, api[name]);
  });

  Object.keys(wx).forEach(function (name) {
    if (hasOwn(wx, name) || hasOwn(protocols, name)) {
      uni[name] = promisify(name, wrapper(name, wx[name]));
    }
  });
}

wx.createApp = createApp;
wx.createPage = createPage;
wx.createComponent = createComponent;

var uni$1 = uni;var _default =

uni$1;exports.default = _default;

/***/ }),

/***/ "./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    {
      if(vm.$scope && vm.$scope.is){
        return vm.$scope.is
      }
    }
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ( true && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (true) {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ( true && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    true
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ( true && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (true) {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       true && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (true) {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       true && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     true && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ( true &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       true && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : undefined
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (true) {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : undefined;
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       true && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          {
            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn
                return
            }
            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警
            if(vm._getFormData || (vm.$parent && vm.$parent.__next_tick_pending)){
              return
            }
          }
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {}
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     true && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
       true && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ( true && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if ( true &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {}
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  
    initState(vm);
    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props
    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      

    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if ( true &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.10';

/**
 * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js
 */
var ARRAYTYPE = '[object Array]';
var OBJECTTYPE = '[object Object]';
// const FUNCTIONTYPE = '[object Function]'

function diff(current, pre) {
    var result = {};
    syncKeys(current, pre);
    _diff(current, pre, '', result);
    return result
}

function syncKeys(current, pre) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {
        if(Object.keys(current).length >= Object.keys(pre).length){
            for (var key in pre) {
                var currentValue = current[key];
                if (currentValue === undefined) {
                    current[key] = null;
                } else {
                    syncKeys(currentValue, pre[key]);
                }
            }
        }
    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {
        if (current.length >= pre.length) {
            pre.forEach(function (item, index) {
                syncKeys(current[index], item);
            });
        }
    }
}

function _diff(current, pre, path, result) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE) {
        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {
            setResult(result, path, current);
        } else {
            var loop = function ( key ) {
                var currentValue = current[key];
                var preValue = pre[key];
                var currentType = type(currentValue);
                var preType = type(preValue);
                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {
                    if (currentValue != pre[key]) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    }
                } else if (currentType == ARRAYTYPE) {
                    if (preType != ARRAYTYPE) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        if (currentValue.length < preValue.length) {
                            setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                        } else {
                            currentValue.forEach(function (item, index) {
                                _diff(item, preValue[index], (path == '' ? '' : path + ".") + key + '[' + index + ']', result);
                            });
                        }
                    }
                } else if (currentType == OBJECTTYPE) {
                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        for (var subKey in currentValue) {
                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + ".") + key + '.' + subKey, result);
                        }
                    }
                }
            };

            for (var key in current) loop( key );
        }
    } else if (rootCurrentType == ARRAYTYPE) {
        if (rootPreType != ARRAYTYPE) {
            setResult(result, path, current);
        } else {
            if (current.length < pre.length) {
                setResult(result, path, current);
            } else {
                current.forEach(function (item, index) {
                    _diff(item, pre[index], path + '[' + index + ']', result);
                });
            }
        }
    } else {
        setResult(result, path, current);
    }
}

function setResult(result, k, v) {
    // if (type(v) != FUNCTIONTYPE) {
        result[k] = v;
    // }
}

function type(obj) {
    return Object.prototype.toString.call(obj)
}

/*  */

function flushCallbacks$1(vm) {
    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {
        if (Object({"VUE_APP_PLATFORM":"mp-weixin","NODE_ENV":"development","BASE_URL":"/"}).VUE_APP_DEBUG) {
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');
        }
        var copies = vm.__next_tick_callbacks.slice(0);
        vm.__next_tick_callbacks.length = 0;
        for (var i = 0; i < copies.length; i++) {
            copies[i]();
        }
    }
}

function hasRenderWatcher(vm) {
    return queue.find(function (watcher) { return vm._watcher === watcher; })
}

function nextTick$1(vm, cb) {
    //1.nextTick 之前 已 setData 且 setData 还未回调完成
    //2.nextTick 之前存在 render watcher
    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {
        if(Object({"VUE_APP_PLATFORM":"mp-weixin","NODE_ENV":"development","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:nextVueTick');
        }
        return nextTick(cb, vm)
    }else{
        if(Object({"VUE_APP_PLATFORM":"mp-weixin","NODE_ENV":"development","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance$1 = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +
                ']:nextMPTick');
        }
    }
    var _resolve;
    if (!vm.__next_tick_callbacks) {
        vm.__next_tick_callbacks = [];
    }
    vm.__next_tick_callbacks.push(function () {
        if (cb) {
            try {
                cb.call(vm);
            } catch (e) {
                handleError(e, vm, 'nextTick');
            }
        } else if (_resolve) {
            _resolve(vm);
        }
    });
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
            _resolve = resolve;
        })
    }
}

/*  */

function cloneWithData(vm) {
    // 确保当前 vm 所有数据被同步
    var dataKeys = [].concat(
        Object.keys(vm._data || {}),
        Object.keys(vm._computedWatchers || {}));

    var ret = dataKeys.reduce(function(ret, key) {
        ret[key] = vm[key];
        return ret
    }, Object.create(null));
    //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据
    Object.assign(ret, vm.$mp.data || {});
    if (
        Array.isArray(vm.$options.behaviors) &&
        vm.$options.behaviors.indexOf('uni://form-field') !== -1
    ) { //form-field
        ret['name'] = vm.name;
        ret['value'] = vm.value;
    }
    return JSON.parse(JSON.stringify(ret))
}

var patch = function(oldVnode, vnode) {
    var this$1 = this;

    if (vnode === null) { //destroy
        return
    }
    if (this.mpType === 'page' || this.mpType === 'component') {
        var mpInstance = this.$scope;
        var data = cloneWithData(this);
        data.__webviewId__ = mpInstance.data.__webviewId__;
        var mpData = Object.create(null);
        Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据
            mpData[key] = mpInstance.data[key];
        });
        var diffData = diff(data, mpData);
        if (Object.keys(diffData).length) {
            if (Object({"VUE_APP_PLATFORM":"mp-weixin","NODE_ENV":"development","BASE_URL":"/"}).VUE_APP_DEBUG) {
                console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +
                    ']差量更新',
                    JSON.stringify(diffData));
            }
            this.__next_tick_pending = true;
            mpInstance.setData(diffData, function () {
                this$1.__next_tick_pending = false;
                flushCallbacks$1(this$1);
            });
        } else {
            flushCallbacks$1(this);
        }
    }
};

/*  */

function createEmptyRender() {

}

function mountComponent$1(
  vm,
  el,
  hydrating
) {
  if (!vm.mpType) {//main.js 中的 new Vue
    return vm
  }
  if (vm.mpType === 'app') {
    vm.$options.render = createEmptyRender;
  }
  if (!vm.$options.render) {
    vm.$options.render = createEmptyRender;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  
  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');

  var updateComponent = function () {
    vm._update(vm._render(), hydrating);
  };

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;
  return vm
}

/*  */

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/*  */

var MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];

function getTarget(obj, path) {
    var parts = path.split('.');
    var key = parts[0];
    if (key.indexOf('__$n') === 0) { //number index
        key = parseInt(key.replace('__$n', ''));
    }
    if (parts.length === 1) {
        return obj[key]
    }
    return getTarget(obj[key], parts.slice(1).join('.'))
}

function internalMixin(Vue) {

    var oldEmit = Vue.prototype.$emit;

    Vue.prototype.$emit = function(event) {
        if (this.$scope && event) {
            this.$scope['triggerEvent'](event, {
                __args__: toArray(arguments, 1)
            });
        }
        return oldEmit.apply(this, arguments)
    };
    
    Vue.prototype.$nextTick = function (fn) {
      return nextTick$1(this, fn)
    };

    MP_METHODS.forEach(function (method) {
        Vue.prototype[method] = function(args) {
            if (this.$scope) {
                return this.$scope[method](args)
            }
        };
    });

    Vue.prototype.__init_provide = initProvide;

    Vue.prototype.__init_injections = initInjections;

    Vue.prototype.__call_hook = function(hook, args) {
        var vm = this;
        // #7573 disable dep collection when invoking lifecycle hooks
        pushTarget();
        var handlers = vm.$options[hook];
        var info = hook + " hook";
        var ret;
        if (handlers) {
            for (var i = 0, j = handlers.length; i < j; i++) {
                ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);
            }
        }
        if (vm._hasHookEvent) {
            vm.$emit('hook:' + hook);
        }
        popTarget();
        return ret
    };

    Vue.prototype.__set_model = function(target, key, value, modifiers) {
        if (Array.isArray(modifiers)) {
            if (modifiers.indexOf('trim') !== -1) {
                value = value.trim();
            }
            if (modifiers.indexOf('number') !== -1) {
                value = this._n(value);
            }
        }
        if(!target){
            target = this;
        }
        target[key] = value;
    };

    Vue.prototype.__set_sync = function(target, key, value) {
        if(!target){
            target = this;
        }
        target[key] = value;
    };

    Vue.prototype.__get_orig = function(item) {
        if (isPlainObject(item)) {
            return item['$orig'] || item
        }
        return item
    };

    Vue.prototype.__get_value = function(dataPath, target) {
        return getTarget(target || this, dataPath)
    };


    Vue.prototype.__get_class = function(dynamicClass, staticClass) {
        return renderClass(staticClass, dynamicClass)
    };

    Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {
        if (!dynamicStyle && !staticStyle) {
            return ''
        }
        var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);
        var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;
        return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + ":" + (styleObj[name])); }).join(';')
    };

}

/*  */

var LIFECYCLE_HOOKS$1 = [
    //App
    'onLaunch',
    'onShow',
    'onHide',
    'onUniNViewMessage',
    'onError',
    //Page
    'onLoad',
    // 'onShow',
    'onReady',
    // 'onHide',
    'onUnload',
    'onPullDownRefresh',
    'onReachBottom',
    'onTabItemTap',
    'onShareAppMessage',
    'onResize',
    'onPageScroll',
    'onNavigationBarButtonTap',
    'onBackPress',
    'onNavigationBarSearchInputChanged',
    'onNavigationBarSearchInputConfirmed',
    'onNavigationBarSearchInputClicked',
    //Component
    // 'onReady', // 兼容旧版本，应该移除该事件
    'onPageShow',
    'onPageHide',
    'onPageResize'
];
function lifecycleMixin$1(Vue) {

    //fixed vue-class-component
    var oldExtend = Vue.extend;
    Vue.extend = function(extendOptions) {
        extendOptions = extendOptions || {};

        var methods = extendOptions.methods;
        if (methods) {
            Object.keys(methods).forEach(function (methodName) {
                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {
                    extendOptions[methodName] = methods[methodName];
                    delete methods[methodName];
                }
            });
        }

        return oldExtend.call(this, extendOptions)
    };

    var strategies = Vue.config.optionMergeStrategies;
    var mergeHook = strategies.created;
    LIFECYCLE_HOOKS$1.forEach(function (hook) {
        strategies[hook] = mergeHook;
    });

    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;
}

/*  */

// install platform patch function
Vue.prototype.__patch__ = patch;

// public mount method
Vue.prototype.$mount = function(
    el ,
    hydrating 
) {
    return mountComponent$1(this, el, hydrating)
};

lifecycleMixin$1(Vue);
internalMixin(Vue);

/*  */

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })

}]);
//# sourceMappingURL=../../.sourcemap/mp-weixin/common/vendor.js.map